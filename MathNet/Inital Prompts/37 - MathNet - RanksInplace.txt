Create a test class using the MSTest framework to test the RanksInplace method from the ArrayStatistics class. The goal is to validate the method's functionality across different scenarios, including typical and edge cases, ensuring it handles both valid and invalid inputs appropriately.

The method to be tested is:

using System;

namespace MathNet.Numerics.Statistics
{
    /// <summary>
    /// Statistics operating on arrays assumed to be unsorted.
    /// WARNING: Methods with the Inplace-suffix may modify the data array by reordering its entries.
    /// </summary>
    /// <seealso cref="SortedArrayStatistics"/>
    /// <seealso cref="StreamingStatistics"/>
    /// <seealso cref="Statistics"/>
    public static partial class ArrayStatistics
    {
		/// <summary>
		/// Evaluates the rank of each entry of the unsorted data array.
		/// The rank definition can be specified to be compatible
		/// with an existing system.
		/// WARNING: Works inplace and can thus causes the data array to be reordered.
		/// </summary>
		public static double[] RanksInplace(double[] data, RankDefinition definition = RankDefinition.Default)
		{
			var ranks = new double[data.Length];
			var index = new int[data.Length];
			for (int i = 0; i < index.Length; i++)
			{
				index[i] = i;
			}

			if (definition == RankDefinition.First)
			{
				Sorting.SortAll(data, index);
				for (int i = 0; i < ranks.Length; i++)
				{
					ranks[index[i]] = i + 1;
				}

				return ranks;
			}

			Sorting.Sort(data, index);
			int previousIndex = 0;
			for (int i = 1; i < data.Length; i++)
			{
				if (Math.Abs(data[i] - data[previousIndex]) <= 0d)
				{
					continue;
				}

				if (i == previousIndex + 1)
				{
					ranks[index[previousIndex]] = i;
				}
				else
				{
					RanksTies(ranks, index, previousIndex, i, definition);
				}

				previousIndex = i;
			}

			RanksTies(ranks, index, previousIndex, data.Length, definition);
			return ranks;
		}
	}
}

Here are additional project-specific details referenced in the method:

RankDefinition: An enumeration used to define how ties are handled in statistical ranking calculations.
- Namespace: MathNet.Numerics.Statistics
- Values:
  - `Average`: Replace ties with their mean (default behavior).
  - `Min`: Replace ties with their minimum (typical in sports ranking).
  - `Max`: Replace ties with their maximum.


Sorting: Sorting algorithms for single, tuple and triple lists
- Namespace: MathNet.Numerics

RanksTies
- Method signature: static void RanksTies(double[] ranks, int[] index, int a, int b, RankDefinition definition)
- Namespace: MathNet.Numerics.Statistics.ArrayStatistics
