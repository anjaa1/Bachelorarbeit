Create a test class using the MSTest framework to test the CombinationsWithRepetition method from the Combinatorics class. The goal is to validate the method's functionality across different scenarios, including typical and edge cases, ensuring it handles both valid and invalid inputs appropriately.

The method to be tested is:

using System;
using System.Collections.Generic;
using System.Linq;
using MathNet.Numerics.Random;
using System.Numerics;

namespace MathNet.Numerics
{
    /// <summary>
    /// Enumerative Combinatorics and Counting.
    /// </summary>
    public static class Combinatorics
    {
		/// <summary>
		/// Count the number of possible combinations with repetition.
		/// The order does not matter and an object can be chosen more than once.
		/// </summary>
		/// <param name="n">Number of elements in the set.</param>
		/// <param name="k">Number of elements to choose from the set. Each element is chosen 0, 1 or multiple times.</param>
		/// <returns>Maximum number of combinations with repetition.</returns>
		public static double CombinationsWithRepetition(int n, int k)
		{
			if (k < 0 || n < 0 || (n == 0 && k > 0))
			{
				return 0;
			}

			if (n == 0 && k == 0)
			{
				return 1;
			}

			return Math.Floor(
				0.5 + Math.Exp(
					SpecialFunctions.FactorialLn(n + k - 1)
					- SpecialFunctions.FactorialLn(k)
					- SpecialFunctions.FactorialLn(n - 1)));
		}
	}
}

ere are additional project-specific details referenced in the method:

SpecialFunctions: This partial implementattion of the SpecialFunctions class contains all methods related to the spherical Bessel functions
- Namespace: MathNet.Numerics.SpecialFunctions

FactorialLn: /// Computes the logarithmic factorial function x -> ln(x!) of an integer number > 0.
- Method signature: public static double FactorialLn(int x)
- returns: A value value! for value > 0



