The generated MSTest test does not compile. Please correct the tests to fulfill the initial task.

Generated Test:
Below is the generated MSTest test class that does not compile:
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Globalization;
using System.Linq;
using MathNet.Numerics;
using MathNet.Numerics.Testing;

namespace MathNet.Numerics.Tests
{
    [TestClass]
    public class ComplexExtensionsTests
    {
        [TestMethod]
        public void ToComplex_TypicalFormats_ReturnsCorrectComplexNumbers()
        {
            // Arrange
            var culture = CultureInfo.InvariantCulture;
            var provider = culture;

            // Act
            var result1 = "1".ToComplex(provider);
            var result2 = "1,1".ToComplex(provider);
            var result3 = "1,1i".ToComplex(provider);
            var result4 = "(1,1)".ToComplex(provider);
            var result5 = "(1,1i)".ToComplex(provider);
            var result6 = "1+1i".ToComplex(provider);
            var result7 = "1+1i".ToComplex(provider);
            var result8 = "1-1i".ToComplex(provider);
            var result9 = "1-1i".ToComplex(provider);

            // Assert
            Assert.AreEqual(1, result1.Real);
            Assert.AreEqual(0, result1.Imaginary);
            Assert.AreEqual(1, result2.Real);
            Assert.AreEqual(1, result2.Imaginary);
            Assert.AreEqual(1, result3.Real);
            Assert.AreEqual(1, result3.Imaginary);
            Assert.AreEqual(1, result4.Real);
            Assert.AreEqual(1, result4.Imaginary);
            Assert.AreEqual(1, result5.Real);
            Assert.AreEqual(1, result5.Imaginary);
            Assert.AreEqual(1, result6.Real);
            Assert.AreEqual(1, result6.Imaginary);
            Assert.AreEqual(1, result7.Real);
            Assert.AreEqual(-1, result7.Imaginary);
            Assert.AreEqual(1, result8.Real);
            Assert.AreEqual(-1, result8.Imaginary);
            Assert.AreEqual(1, result9.Real);
            Assert.AreEqual(1, result9.Imaginary);
        }

        [TestMethod]
        public void ToComplex_InvalidFormats_ThrowsFormatException()
        {
            // Arrange
            var culture = CultureInfo.InvariantCulture;
            var provider = culture;

            // Act and Assert
            Assert.ThrowsException<FormatException>(() => "1,1,1".ToComplex(provider));
            Assert.ThrowsException<FormatException>(() => "1,1i,1i".ToComplex(provider));
            Assert.ThrowsException<FormatException>(() => "1,1i,1".ToComplex(provider));
            Assert.ThrowsException<FormatException>(() => "1,1i,1i,1".ToComplex(provider));
            Assert.ThrowsException<FormatException>(() => "1,1i,1i,1i".ToComplex(provider));
        }

        [TestMethod]
        public void ToComplex_NullInput_ThrowsArgumentNullException()
        {
            // Arrange
            var culture = CultureInfo.InvariantCulture;
            var provider = culture;

            // Act and Assert
            Assert.ThrowsException<ArgumentNullException>(() => (string)null.ToComplex(provider));
        }

        [TestMethod]
        public void ToComplex_EmptyInput_ThrowsFormatException()
        {
            // Arrange
            var culture = CultureInfo.InvariantCulture;
            var provider = culture;

            // Act and Assert
            Assert.ThrowsException<FormatException>(() => "".ToComplex(provider));
        }

        [TestMethod]
        public void ToComplex_LeadingOrTrailingSpaces_ThrowsFormatException()
        {
            // Arrange
            var culture = CultureInfo.InvariantCulture;
            var provider = culture;

            // Act and Assert
            Assert.ThrowsException<FormatException>(() => " 1".ToComplex(provider));
            Assert.ThrowsException<FormatException>(() => "1 ".ToComplex(provider));
            Assert.ThrowsException<FormatException>(() => " 1,1 ".ToComplex(provider));
            Assert.ThrowsException<FormatException>(() => "1,1 ".ToComplex(provider));
            Assert.ThrowsException<FormatException>(() => " 1+1i ".ToComplex(provider));
            Assert.ThrowsException<FormatException>(() => "1+1i ".ToComplex(provider));
        }
    }
}


Error Messages:
Here are the error messages reported by the IDE:
Severity	Code	Description	Line	Details
Error (active)	CS0234	The type or namespace name 'Testing' does not exist in the namespace 'MathNet.Numerics' (are you missing an assembly reference?)	6	
Error (active)	CS0023	Operator '.' cannot be applied to operand of type '<null>'	75	


Inital Task:
Here is the inital Task that was provided for generating the test:
Create a test class using the MSTest framework to test the ToComplex method from the ComplexExtensions class. The goal is to validate the method's functionality across different scenarios, including typical and edge cases, ensuring it handles both valid and invalid inputs appropriately.

The method to be tested is:

using System;
using System.Collections.Generic;
using Complex = System.Numerics.Complex;
using System.Runtime;

namespace MathNet.Numerics
{
    /// <summary>
    /// Extension methods for the Complex type provided by System.Numerics
    /// </summary>
    public static class ComplexExtensions
    {

        /// <summary>
        /// Creates a complex number based on a string. The string can be in the
        /// following formats (without the quotes): 'n', 'ni', 'n +/- ni',
        /// 'ni +/- n', 'n,n', 'n,ni,' '(n,n)', or '(n,ni)', where n is a double.
        /// </summary>
        /// <returns>
        /// A complex number containing the value specified by the given string.
        /// </returns>
        /// <param name="value">
        /// the string to parse.
        /// </param>
        /// <param name="formatProvider">
        /// An <see cref="IFormatProvider"/> that supplies culture-specific
        /// formatting information.
        /// </param>
        public static Complex ToComplex(this string value, IFormatProvider formatProvider)
        {
            if (value == null)
            {
                throw new ArgumentNullException(nameof(value));
            }

            value = value.Trim();
            if (value.Length == 0)
            {
                throw new FormatException();
            }

            // strip out parens
            if (value.StartsWith("(", StringComparison.Ordinal))
            {
                if (!value.EndsWith(")", StringComparison.Ordinal))
                {
                    throw new FormatException();
                }

                value = value.Substring(1, value.Length - 2).Trim();
            }

            // keywords
            var numberFormatInfo = formatProvider.GetNumberFormatInfo();
            var textInfo = formatProvider.GetTextInfo();
            var keywords =
                new[]
                {
                    textInfo.ListSeparator, numberFormatInfo.NaNSymbol,
                    numberFormatInfo.NegativeInfinitySymbol, numberFormatInfo.PositiveInfinitySymbol,
                    "+", "-", "i", "j"
                };

            // lexing
            var tokens = new LinkedList<string>();
            GlobalizationHelper.Tokenize(tokens.AddFirst(value), keywords, 0);
            var token = tokens.First;

            // parse the left part
            var leftPart = ParsePart(ref token, out var isLeftPartImaginary, formatProvider);
            if (token == null)
            {
                return isLeftPartImaginary ? new Complex(0, leftPart) : new Complex(leftPart, 0);
            }

            // parse the right part
            if (token.Value == textInfo.ListSeparator)
            {
                // format: real,imag
                token = token.Next;

                if (isLeftPartImaginary)
                {
                    // left must not contain 'i', right doesn't matter.
                    throw new FormatException();
                }

                var rightPart = ParsePart(ref token, out _, formatProvider);

                return new Complex(leftPart, rightPart);
            }
            else
            {
                // format: real + imag
                var rightPart = ParsePart(ref token, out var isRightPartImaginary, formatProvider);

                if (!(isLeftPartImaginary ^ isRightPartImaginary))
                {
                    // either left or right part must contain 'i', but not both.
                    throw new FormatException();
                }

                return isLeftPartImaginary ? new Complex(rightPart, leftPart) : new Complex(leftPart, rightPart);
            }
        }
	}
}

Here are additional project-specific details referenced in the method:

Complex: A structure representing complex numbers with real and imaginary parts. It provides methods for mathematical operations
- Constructor: public Complex(double real, double imaginary)
- Namespace: System.Numerics

ParsePart: Parse a part (real or complex) from a complex number
- method signature: static double ParsePart(ref LinkedListNode<string> token, out bool imaginary, IFormatProvider format)
- return: Resulting part as double
- exception: FormatException

