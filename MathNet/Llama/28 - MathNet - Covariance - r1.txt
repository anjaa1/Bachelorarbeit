The generated MSTest test compiles but fails during execution. Please correct the tests to fulfill the initial task.

Generated Test:
Below is the generated MSTest test that does not compile:
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using MathNet.Numerics.Statistics;

namespace MathNet.Numerics.Tests
{
    [TestClass]
    public class StreamingStatisticsTests
    {
        [TestMethod]
        public void Covariance_TypicalScenario_ReturnsCorrectValue()
        {
            // Arrange
            var samples1 = new[] { 1.0, 2.0, 3.0, 4.0, 5.0 };
            var samples2 = new[] { 6.0, 7.0, 8.0, 9.0, 10.0 };

            // Act
            var result = StreamingStatistics.Covariance(samples1, samples2);

            // Assert
            Assert.AreEqual(0, result);
        }
	}
}

Error Messages:
Here are the error messages reported by the IDE:
Assert.AreEqual failed. Expected:<0>. Actual:<2,5>.

Inital Task:
Here is the inital Task that was provided for generating the test:
Create a test class using the MSTest framework to test the Covariance method from the StreamingStatistics class. The goal is to validate the method's functionality across different scenarios, including typical and edge cases, ensuring it handles both valid and invalid inputs appropriately.

The method to be tested is:

using System;
using System.Collections.Generic;
using System.Linq;
using Complex = System.Numerics.Complex;

namespace MathNet.Numerics.Statistics
{
    /// <summary>
    /// Statistics operating on an IEnumerable in a single pass, without keeping the full data in memory.
    /// Can be used in a streaming way, e.g. on large datasets not fitting into memory.
    /// </summary>
    /// <seealso cref="SortedArrayStatistics"/>
    /// <seealso cref="StreamingStatistics"/>
    /// <seealso cref="Statistics"/>
    public static class StreamingStatistics
    {
        /// <summary>
        /// Estimates the unbiased population covariance from the provided two sample enumerable sequences, in a single pass without memoization.
        /// On a dataset of size N will use an N-1 normalizer (Bessel's correction).
        /// Returns NaN if data has less than two entries or if any entry is NaN.
        /// </summary>
        /// <param name="samples1">First sample stream.</param>
        /// <param name="samples2">Second sample stream.</param>
        public static double Covariance(IEnumerable<double> samples1, IEnumerable<double> samples2)
        {
            // https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance
            var n = 0;
            var mean1 = 0.0;
            var mean2 = 0.0;
            var comoment = 0.0;

            using (var s1 = samples1.GetEnumerator())
            using (var s2 = samples2.GetEnumerator())
            {
                while (s1.MoveNext())
                {
                    if (!s2.MoveNext())
                    {
                        throw new ArgumentException("All vectors must have the same dimensionality.");
                    }

                    var mean2Prev = mean2;
                    n++;
                    mean1 += (s1.Current - mean1)/n;
                    mean2 += (s2.Current - mean2)/n;
                    comoment += (s1.Current - mean1)*(s2.Current - mean2Prev);
                }

                if (s2.MoveNext())
                {
                    throw new ArgumentException("All vectors must have the same dimensionality.");
                }
            }

            return n > 1 ? comoment/(n - 1) : double.NaN;
        }
	}
}

