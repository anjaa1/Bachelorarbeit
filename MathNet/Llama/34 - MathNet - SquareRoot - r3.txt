The generated MSTest test compiles but fails during execution. Please correct the tests to fulfill the initial task.

Generated Test:
Below is the generated MSTest test that does not compile:
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Numerics;
using MathNet.Numerics;

namespace MathNet.Numerics.Tests
{
    [TestClass]
    public class ComplexExtensionsTests
    {
        [TestMethod]
        public void SquareRoot_TypicalCase_ReturnsCorrectSquareRoot()
        {
            // Arrange
            Complex complex = new Complex(4, 3);

            // Act
            Complex result = ComplexExtensions.SquareRoot(complex);

            // Assert
            Assert.AreEqual(new Complex(2, 1.224744871391589), result);
        }
		Here are the error messages reported by the IDE:
		 Assert.AreEqual failed. Expected:<<2; 1,224744871391589>>. Actual:<<2,1213203435596424; 0,7071067811865476>>. 

        [TestMethod]
        public void SquareRoot_EdgeCase_LargeNumber_ReturnsCorrectSquareRoot()
        {
            // Arrange
            Complex complex = new Complex(1000000, 300000);

            // Act
            Complex result = ComplexExtensions.SquareRoot(complex);

            // Assert
            Assert.AreEqual(new Complex(1000, 148.3756228142868), result);
        }
		Here are the error messages reported by the IDE:
		Assert.AreEqual failed. Expected:<<1000; 148,3756228142868>>. Actual:<<1010,9477362581745; 148,3756228142868>>. 

        [TestMethod]
        public void SquareRoot_EdgeCase_SmallNumber_ReturnsCorrectSquareRoot()
        {
            // Arrange
            Complex complex = new Complex(0.000001, 0.000003);

            // Act
            Complex result = ComplexExtensions.SquareRoot(complex);

            // Assert
            Assert.AreEqual(new Complex(0.001, 0.0010397782600555705), result);
        }
		Here are the error messages reported by the IDE:
		Assert.AreEqual failed. Expected:<<0,001; 0,0010397782600555705>>. Actual:<<0,001442615274452683; 0,0010397782600555705>>. 

        [TestMethod]
        [ExpectedException(typeof(ArgumentException))]
        public void SquareRoot_InvalidInput_NonComplexNumber_ThrowsArgumentException()
        {
            // Arrange
            double real = 4;
            double imaginary = 3;

            // Act
            ComplexExtensions.SquareRoot(new Complex(real, imaginary));
        }
		Here are the error messages reported by the IDE:
		 Test method did not throw expected exception System.ArgumentException. 

        [TestMethod]
        [ExpectedException(typeof(ArgumentException))]
        public void SquareRoot_InvalidInput_NaN_ThrowsArgumentException()
        {
            // Arrange
            double real = double.NaN;
            double imaginary = 3;

            // Act
            ComplexExtensions.SquareRoot(new Complex(real, imaginary));
        }
		Here are the error messages reported by the IDE:
		Test method did not throw expected exception System.ArgumentException
    }
}

Inital Task:
Here is the inital Task that was provided for generating the test:
Create a test class using the MSTest framework to test the SquareRoot method from the ComplexExtensions class. The goal is to validate the method's functionality across different scenarios, including typical and edge cases, ensuring it handles both valid and invalid inputs appropriately.

The method to be tested is:

using System;
using System.Collections.Generic;
using Complex = System.Numerics.Complex;
using System.Runtime;

namespace MathNet.Numerics
{
    /// <summary>
    /// Extension methods for the Complex type provided by System.Numerics
    /// </summary>
    public static class ComplexExtensions
    {
		/// <summary>
		/// The Square Root (power 1/2) of this <c>Complex</c>
		/// </summary>
		/// <param name="complex">The <see cref="Complex"/> number to perform this operation on.</param>
		/// <returns>
		/// The square root of this complex number.
		/// </returns>
		public static Complex SquareRoot(this Complex complex)
		{
			// Note: the following code should be equivalent to Complex.Sqrt(complex),
			// but it turns out that is implemented poorly in System.Numerics,
			// hence we provide our own implementation here. Do not replace.

			if (complex.IsRealNonNegative())
			{
				return new Complex(Math.Sqrt(complex.Real), 0.0);
			}

			Complex result;

			var absReal = Math.Abs(complex.Real);
			var absImag = Math.Abs(complex.Imaginary);
			double w;
			if (absReal >= absImag)
			{
				var ratio = complex.Imaginary / complex.Real;
				w = Math.Sqrt(absReal) * Math.Sqrt(0.5 * (1.0 + Math.Sqrt(1.0 + (ratio * ratio))));
			}
			else
			{
				var ratio = complex.Real / complex.Imaginary;
				w = Math.Sqrt(absImag) * Math.Sqrt(0.5 * (Math.Abs(ratio) + Math.Sqrt(1.0 + (ratio * ratio))));
			}

			if (complex.Real >= 0.0)
			{
				result = new Complex(w, complex.Imaginary / (2.0 * w));
			}
			else if (complex.Imaginary >= 0.0)
			{
				result = new Complex(absImag / (2.0 * w), w);
			}
			else
			{
				result = new Complex(absImag / (2.0 * w), -w);
			}

			return result;
		}
	}
}

Here are additional project-specific details referenced in the method:

Complex: A structure representing complex numbers with real and imaginary parts. It provides methods for mathematical operations
- Constructor: public Complex(double real, double imaginary)
- Namespace: System.Numerics

