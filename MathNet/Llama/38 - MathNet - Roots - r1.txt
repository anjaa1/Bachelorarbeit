The generated MSTest test does not compile. Please correct the tests to fulfill the initial task.

Generated Test:
Below is the generated MSTest test class that does not compile:
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using MathNet.Numerics.RootFinding;

namespace UnitTests
{
    [TestClass]
    public class CubicTests
    {
        [TestMethod]
        public void Roots_TypicalValues_ReturnsValidRoots()
        {
            // Arrange
            double d = 1;
            double c = -6;
            double b = 11;
            double a = -6;

            // Act
            var result = Cubic.Roots(d, c, b, a);

            // Assert
            // Check if all roots are valid
            Assert.IsNotNull(result);
            Assert.AreEqual(3, result.Length);
        }

        [TestMethod]
        public void Roots_EdgeCases_ReturnsValidRoots()
        {
            // Arrange
            double d = 0;
            double c = 0;
            double b = 0;
            double a = 1;

            // Act
            var result = Cubic.Roots(d, c, b, a);

            // Assert
            // Check if all roots are valid
            Assert.IsNotNull(result);
            Assert.AreEqual(3, result.Length);
        }

        [TestMethod]
        public void Roots_InvalidInput_ReturnsException()
        {
            // Arrange
            double d = double.NaN;
            double c = 0;
            double b = 0;
            double a = 1;

            // Act and Assert
            Assert.ThrowsException<ArgumentException>(() => Cubic.Roots(d, c, b, a));
        }

        [TestMethod]
        public void Roots_DuplicateRoots_ReturnsValidRoots()
        {
            // Arrange
            double d = 1;
            double c = -6;
            double b = 11;
            double a = -6;

            // Act
            var result = Cubic.Roots(d, c, b, a);

            // Assert
            // Check if all roots are valid
            Assert.IsNotNull(result);
            Assert.AreEqual(3, result.Length);
        }

        [TestMethod]
        public void Roots_RealRoot_ReturnsValidRoots()
        {
            // Arrange
            double d = 1;
            double c = -6;
            double b = 11;
            double a = -6;

            // Act
            var result = Cubic.Roots(d, c, b, a);

            // Assert
            // Check if all roots are valid
            Assert.IsNotNull(result);
            Assert.AreEqual(3, result.Length);
        }
    }
}


Error Messages:
Here are the error messages reported by the IDE:
Severity	Code	Description	Line	Details
Error (active)	CS1061	'(Complex, Complex, Complex)' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type '(Complex, Complex, Complex)' could be found (are you missing a using directive or an assembly reference?)	25	
Error (active)	CS1061	'(Complex, Complex, Complex)' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type '(Complex, Complex, Complex)' could be found (are you missing a using directive or an assembly reference?)	43	
Error (active)	CS1061	'(Complex, Complex, Complex)' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type '(Complex, Complex, Complex)' could be found (are you missing a using directive or an assembly reference?)	74	
Error (active)	CS1061	'(Complex, Complex, Complex)' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type '(Complex, Complex, Complex)' could be found (are you missing a using directive or an assembly reference?)	92	


Inital Task:
Here is the inital Task that was provided for generating the test:
Create a test class using the MSTest framework to test the Roots method from the Cubic class. The goal is to validate the method's functionality across different scenarios, including typical and edge cases, ensuring it handles both valid and invalid inputs appropriately.

The method to be tested is:

using System;
using Complex = System.Numerics.Complex;

namespace MathNet.Numerics.RootFinding
{
    /// <summary>
    /// Finds roots to the cubic equation x^3 + a2*x^2 + a1*x + a0 = 0
    /// Implements the cubic formula in http://mathworld.wolfram.com/CubicFormula.html
    /// </summary>
    public static class Cubic
    {
	    public static (Complex, Complex, Complex) Roots(double d, double c, double b, double a)
        {
            double A = b*b - 3*a*c;
            double B = 2*b*b*b - 9*a*b*c + 27*a*a*d;
            double s = -1/(3*a);

            double D = (B*B - 4*A*A*A)/(-27*a*a);
            if (D == 0d)
            {
                if (A == 0d)
                {
                    var u = new Complex(s*b, 0d);
                    return (u, u, u);
                }

                var v = new Complex((9*a*d - b*c)/(2*A), 0d);
                var w = new Complex((4*a*b*c - 9*a*a*d - b*b*b)/(a*A), 0d);
                return (v, v, w);
            }

            var C = (A == 0)
                ? new Complex(B, 0d).CubicRoots()
                : ((B + Complex.Sqrt(B*B - 4*A*A*A))/2).CubicRoots();

            return (s*(b + C.Item1 + A/C.Item1), s*(b + C.Item2 + A/C.Item2), s*(b + C.Item3 + A/C.Item3));
        }
    }
}

Here are additional project-specific details referenced in the method:

Complex: A structure representing complex numbers with real and imaginary parts. It provides methods for mathematical operations
- Constructor: public Complex(double real, double imaginary)
- Namespace: System.Numerics

