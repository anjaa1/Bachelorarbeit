The generated MSTest test compiles but fails during execution. Please correct the tests to fulfill the initial task.

Generated Test:
Below is the generated MSTest test that does not compile:

using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using MathNet.Numerics;

namespace MathNet.Numerics.Tests
{
    [TestClass]
    public class SpecialFunctionsTests
    {
        [TestMethod]
        [DataRow(1.0, 1.0, 0.6321205588285577)] // Typical case
        [DataRow(2.5, 3.0, 0.8012528742177771)] // Typical case
        [DataRow(0.1, 0.1, 0.9054140840791538)] // Edge case with small values
        [DataRow(1.0, 0.0, 0.0)]                // Edge case where x is zero
        [DataRow(0.0, 1.0, 1.0)]                // Edge case where a is zero
        public void GammaLowerRegularized_ValidInputs_ReturnsExpected(double a, double x, double expected)
        {
            // Act
            double result = SpecialFunctions.GammaLowerRegularized(a, x);

            // Assert
            Assert.AreEqual(expected, result, 1e-15, $"Failed for a={a}, x={x}");
        }
[TestMethod]
		public void GammaLowerRegularized_SmallValues_ReturnsExpected()
		{
			// Arrange
			double a = 1e-5;
			double x = 1e-5;
			double expected = 0.999995;

			// Act
			double result = SpecialFunctions.GammaLowerRegularized(a, x);

			// Assert
			Assert.AreEqual(expected, result, 1e-5);
		}

        [TestMethod]
        public void GammaLowerRegularized_LargeValues_ReturnsExpected()
        {
            // Arrange
            double a = 100.0;
            double x = 100.0;
            double expected = 0.5; // Expected result for large equal values

            // Act
            double result = SpecialFunctions.GammaLowerRegularized(a, x);

            // Assert
            Assert.AreEqual(expected, result, 1e-15);
        }
	}
}	
		
Error Messages:
Here are the error messages reported by the IDE:
 Assert.AreEqual failed. Expected a difference no greater than <1E-15> between expected value <0,8012528742177771> and actual value <0,6937810815867218>. Failed for a=2,5, x=3
Assert.AreEqual failed. Expected a difference no greater than <1E-15> between expected value <0,9054140840791538> and actual value <0,8275517595858495>. Failed for a=0,1, x=0,1
 Assert.AreEqual failed. Expected a difference no greater than <1E-05> between expected value <0,999995> and actual value <0,9998906486990408>. 
 Assert.AreEqual failed. Expected a difference no greater than <1E-15> between expected value <0,5> and actual value <0,5132987982791017>. 
 
 
Inital Task:
Create a test class using the MSTest framework to test the GammaLowerRegularized method from the SpecialFunctions class. The goal is to validate the method's functionality across different scenarios, including typical and edge cases, ensuring it handles both valid and invalid inputs appropriately.

The method to be tested is:
using System;

namespace MathNet.Numerics
{
    public static partial class SpecialFunctions
    {
        /// <summary>
        /// Returns the lower incomplete regularized gamma function
        /// P(a,x) = 1/Gamma(a) * int(exp(-t)t^(a-1),t=0..x) for real a &gt; 0, x &gt; 0.
        /// </summary>
        /// <param name="a">The argument for the gamma function.</param>
        /// <param name="x">The upper integral limit.</param>
        /// <returns>The lower incomplete gamma function.</returns>
        public static double GammaLowerRegularized(double a, double x)
        {
            const double epsilon = 0.000000000000001;
            const double big = 4503599627370496.0;
            const double bigInv = 2.22044604925031308085e-16;

            if (a < 0d)
            {
                throw new ArgumentOutOfRangeException(nameof(a), "Value must not be negative (zero is ok).");
            }

            if (x < 0d)
            {
                throw new ArgumentOutOfRangeException(nameof(x), "Value must not be negative (zero is ok).");
            }

            if (a.AlmostEqual(0.0))
            {
                if (x.AlmostEqual(0.0))
                {
                    //use right hand limit value because so that regularized upper/lower gamma definition holds.
                    return 1d;
                }

                return 1d;
            }

            if (x.AlmostEqual(0.0))
            {
                return 0d;
            }

            double ax = (a*Math.Log(x)) - x - GammaLn(a);
            if (ax < -709.78271289338399)
            {
                return a < x ? 1d : 0d;
            }

            if (x <= 1 || x <= a)
            {
                double r2 = a;
                double c2 = 1;
                double ans2 = 1;

                do
                {
                    r2 = r2 + 1;
                    c2 = c2*x/r2;
                    ans2 += c2;
                }
                while ((c2/ans2) > epsilon);

                return Math.Exp(ax)*ans2/a;
            }

            int c = 0;
            double y = 1 - a;
            double z = x + y + 1;

            double p3 = 1;
            double q3 = x;
            double p2 = x + 1;
            double q2 = z*x;
            double ans = p2/q2;

            double error;

            do
            {
                c++;
                y += 1;
                z += 2;
                double yc = y*c;

                double p = (p2*z) - (p3*yc);
                double q = (q2*z) - (q3*yc);

                if (q != 0)
                {
                    double nextans = p/q;
                    error = Math.Abs((ans - nextans)/nextans);
                    ans = nextans;
                }
                else
                {
                    // zero div, skip
                    error = 1;
                }

                // shift
                p3 = p2;
                p2 = p;
                q3 = q2;
                q2 = q;

                // normalize fraction when the numerator becomes large
                if (Math.Abs(p) > big)
                {
                    p3 *= bigInv;
                    p2 *= bigInv;
                    q3 *= bigInv;
                    q2 *= bigInv;
                }
            }
            while (error > epsilon);

            return 1d - (Math.Exp(ax)*ans);
        }
	}
}

Here are additional project-specific details referenced in the method:

GammaLn: Computes the logarithm of the Gamma function.
- namespace: MathNet.Numerics.SpecialFunctions
- method signature: public static double GammaLn(double z)
- param z: The argument of the gamma function.
- returns: The logarithm of the gamma function.
- info: Our unit tests suggest that the accuracy of the Gamma function is correct up to 14 floating point digits.



