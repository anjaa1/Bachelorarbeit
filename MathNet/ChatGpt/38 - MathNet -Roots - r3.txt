The generated MSTest test compiles but fails during execution. Please correct the tests to fulfill the initial task.

Generated Test:
        [TestMethod]
        public void Roots_EdgeCase_AllZeroCoefficients()
        {
            // Arrange
            double d = 0;
            double c = 0;
            double b = 0;
            double a = 0;

            // Act
            try
            {
                var roots = Cubic.Roots(d, c, b, a);
                Assert.Fail("Expected an exception but none was thrown.");
            }
            catch (DivideByZeroException)
            {
                Assert.IsTrue(true);
            }
        }
Here are the error messages reported by the IDE:
Assert.Fail failed. Expected an exception but none was thrown.

		
[TestMethod]
public void Roots_EdgeCase_DegenerateCubic_AIsZero()
{
    // Arrange
    double d = 1;
    double c = -6;
    double b = 11;
    double a = 0; // Linear equation

    // Act
    try
    {
        var roots = Cubic.Roots(d, c, b, a);
        Assert.Fail("Expected an exception but none was thrown.");
    }
    catch (DivideByZeroException)
    {
        Assert.IsTrue(true);
    }
}
Here are the error messages reported by the IDE:
    Assert.Fail failed. Expected an exception but none was thrown.


        [TestMethod]
        public void Roots_TypicalCase_RealRoots()
        {
            // Arrange
            double d = -6;
            double c = 11;
            double b = -6;
            double a = 1;

            // Act
            var roots = Cubic.Roots(d, c, b, a);

            // Assert
            Assert.AreEqual(1.0, roots.Item1.Real, 1e-6);
            Assert.AreEqual(2.0, roots.Item2.Real, 1e-6);
            Assert.AreEqual(3.0, roots.Item3.Real, 1e-6);
        }
Here are the error messages reported by the IDE:	
    Assert.AreEqual failed. Expected a difference no greater than <1E-06> between expected value <2> and actual value <3>. 

        [TestMethod]
        public void Roots_ValidCase_DoubleRootAndDistinctRoot()
        {
            // Arrange
            double d = 4;
            double c = -10;
            double b = 8;
            double a = 1;

            // Act
            var roots = Cubic.Roots(d, c, b, a);

            // Assert
            Assert.AreEqual(2.0, roots.Item1.Real, 1e-6);
            Assert.AreEqual(2.0, roots.Item2.Real, 1e-6);
            Assert.AreEqual(1.0, roots.Item3.Real, 1e-6);
        }
		

Error Messages:
    Assert.AreEqual failed. Expected a difference no greater than <1E-06> between expected value <2> and actual value <-9,141746120784584>. 

Inital Task:
Here is the inital Task that was provided for generating the test:
Create a test class using the MSTest framework to test the Roots method from the Cubic class. The goal is to validate the method's functionality across different scenarios, including typical and edge cases, ensuring it handles both valid and invalid inputs appropriately.

The method to be tested is:

using System;
using Complex = System.Numerics.Complex;

namespace MathNet.Numerics.RootFinding
{
    /// <summary>
    /// Finds roots to the cubic equation x^3 + a2*x^2 + a1*x + a0 = 0
    /// Implements the cubic formula in http://mathworld.wolfram.com/CubicFormula.html
    /// </summary>
    public static class Cubic
    {
	    public static (Complex, Complex, Complex) Roots(double d, double c, double b, double a)
        {
            double A = b*b - 3*a*c;
            double B = 2*b*b*b - 9*a*b*c + 27*a*a*d;
            double s = -1/(3*a);

            double D = (B*B - 4*A*A*A)/(-27*a*a);
            if (D == 0d)
            {
                if (A == 0d)
                {
                    var u = new Complex(s*b, 0d);
                    return (u, u, u);
                }

                var v = new Complex((9*a*d - b*c)/(2*A), 0d);
                var w = new Complex((4*a*b*c - 9*a*a*d - b*b*b)/(a*A), 0d);
                return (v, v, w);
            }

            var C = (A == 0)
                ? new Complex(B, 0d).CubicRoots()
                : ((B + Complex.Sqrt(B*B - 4*A*A*A))/2).CubicRoots();

            return (s*(b + C.Item1 + A/C.Item1), s*(b + C.Item2 + A/C.Item2), s*(b + C.Item3 + A/C.Item3));
        }
    }
}

Here are additional project-specific details referenced in the method:

Complex: A structure representing complex numbers with real and imaginary parts. It provides methods for mathematical operations
- Constructor: public Complex(double real, double imaginary)
- Namespace: System.Numerics

