The generated MSTest test compiles but fails during execution. Please correct the tests to fulfill the initial task.

Generated Test:
Below is the generated MSTest test that does not compile:
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using MathNet.Numerics;

namespace MathNet.Numerics.Tests.SpecialFunctionsTests
{
    [TestClass]
    public class ExponentialIntegralTests
    {
        private const double RelativeAccuracy = 1e-13;
        [TestMethod]
public void ExponentialIntegral_KnownValues_ReturnsExpectedResults()
{
    // These test cases are verified against the implementation
    var testCases = new[]
    {
        // E₁(1) ≈ 0.219383934395520274
        new { X = 1.0, N = 1, Expected = 0.219383934395520274 },
        // E₂(0.5) ≈ 0.326643862324553
        new { X = 0.5, N = 2, Expected = 0.326643862324553 },
        // E₃(2) ≈ 0.0333841132345152
        new { X = 2.0, N = 3, Expected = 0.0333841132345152 }
    };

    foreach (var testCase in testCases)
    {
        // Act
        double result = SpecialFunctions.ExponentialIntegral(testCase.X, testCase.N);

        // Assert
        Assert.AreEqual(testCase.Expected, result, RelativeAccuracy * Math.Abs(testCase.Expected),
            $"Failed for x={testCase.X}, n={testCase.N}");
    }
}
	
	}}
	Assert.AreEqual failed. Expected a difference no greater than <3,33841132345152E-15> between expected value <0,0333841132345152> and actual value <0,030133379797815836>. Failed for x=2, n=3
Inital Task:
Here is the inital Task that was provided for generating the test:
Create a test class using the MSTest framework to test the ExponentialIntegral method from the SpecialFunctions class. The goal is to validate the method's functionality across different scenarios, including typical and edge cases, ensuring it handles both valid and invalid inputs appropriately.

The method to be tested is:

using System;

namespace MathNet.Numerics
{
    public static partial class SpecialFunctions
    {
        /// <summary>
        /// Computes the generalized Exponential Integral function (En).
        /// </summary>
        /// <param name="x">The argument of the Exponential Integral function.</param>
        /// <param name="n">Integer power of the denominator term. Generalization index.</param>
        /// <returns>The value of the Exponential Integral function.</returns>
        /// <remarks>
        /// <para>This implementation of the computation of the Exponential Integral function follows the derivation in
        ///     "Handbook of Mathematical Functions, Applied Mathematics Series, Volume 55", Abramowitz, M., and Stegun, I.A. 1964,  reprinted 1968 by
        ///     Dover Publications, New York), Chapters 6, 7, and 26.
        ///     AND
        ///     "Advanced mathematical methods for scientists and engineers", Bender, Carl M.; Steven A. Orszag (1978). page 253
        /// </para>
        /// <para>
        ///     for x &gt; 1  uses continued fraction approach that is often used to compute incomplete gamma.
        ///     for 0 &lt; x &lt;= 1 uses Taylor series expansion
        /// </para>
        /// <para>Our unit tests suggest that the accuracy of the Exponential Integral function is correct up to 13 floating point digits.</para>
        /// </remarks>
        public static double ExponentialIntegral(double x, int n)
        {
            //parameter validation
            if (n < 0 || x < 0.0)
            {
                throw new ArgumentOutOfRangeException(FormattableString.Invariant($"x and n must be positive: x={x}, n={n}"));
            }

            const double epsilon = 0.00000000000000001;
            int maxIterations = 100;
            int i, ii;
            double ndbl = n;
            double result;
            double nearDoubleMin = 1e-100; //needs a very small value that is not quite as small as the lowest value double can take
            double factorial = 1.0d;
            double del;
            double psi;
            double a, b, c, d, h; //variables for continued fraction

            //special cases
            if (n == 0)
            {
                return Math.Exp(-1.0d*x)/x;
            }
            else if (x == 0.0d)
            {
                return 1.0d/(ndbl - 1.0d);
            }
            //general cases
            //continued fraction for large x
            if (x > 1.0d)
            {
                b = x + n;
                c = 1.0d/nearDoubleMin;
                d = 1.0d/b;
                h = d;
                for (i = 1; i <= maxIterations; i++)
                {
                    a = -1.0d*i*((ndbl - 1.0d) + i);
                    b += 2.0d;
                    d = 1.0d/(a*d + b);
                    c = b + a/c;
                    del = c*d;
                    h = h*del;
                    if (Math.Abs(del - 1.0d) < epsilon)
                    {
                        return h*Math.Exp(-x);
                    }
                }
                throw new ArithmeticException(FormattableString.Invariant($"Continued fraction failed to converge for x={x}, n={n})"));
            }
            //series computation for small x
            else
            {
                result = ((ndbl - 1.0d) != 0 ? 1.0/(ndbl - 1.0d) : (-1.0d*Math.Log(x) - Constants.EulerMascheroni)); //Set first term.
                for (i = 1; i <= maxIterations; i++)
                {
                    factorial *= (-1.0d*x/i);
                    if (i != (ndbl - 1.0d))
                    {
                        del = -factorial/(i - (ndbl - 1.0d));
                    }
                    else
                    {
                        psi = -1.0d*Constants.EulerMascheroni;
                        for (ii = 1; ii <= (ndbl - 1.0d); ii++)
                        {
                            psi += (1.0d/ii);
                        }
                        del = factorial*(-1.0d*Math.Log(x) + psi);
                    }
                    result += del;
                    if (Math.Abs(del) < Math.Abs(result)*epsilon)
                    {
                        return result;
                    }
                }
                throw new ArithmeticException(FormattableString.Invariant($"Series failed to converge for x={x}, n={n})"));
            }
        }
    }
}

Here are additional project-specific details referenced in the method:

EulerMascheroni: The Euler-Mascheroni constant
- value: public const double EulerMascheroni = 0.5772156649015328606065120900824024310421593359399235988057672348849d;
- namespace: MathNet.Numerics.Constants


