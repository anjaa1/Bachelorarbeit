The generated MSTest test does not compile. Please correct the tests to fulfill the initial task.

Generated Test:
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;

namespace MathNet.Numerics.Statistics.Tests
{
    [TestClass]
    public class ArrayStatisticsRanksInplaceTests
    {
        private const double Delta = 1e-10;

        [TestMethod]
        public void RanksInplace_SimpleSequence_ReturnsCorrectRanks()
        {
            // Arrange
            var data = new[] { 1.0, 2.0, 3.0, 4.0, 5.0 };
            var expected = new[] { 1.0, 2.0, 3.0, 4.0, 5.0 };
            var dataCopy = (double[])data.Clone();

            // Act
            var result = ArrayStatistics.RanksInplace(dataCopy, RankDefinition.First);

            // Assert
            CollectionAssert.AreEqual(expected, result);
        }

        [TestMethod]
        public void RanksInplace_ReversedSequence_ReturnsCorrectRanks()
        {
            // Arrange
            var data = new[] { 5.0, 4.0, 3.0, 2.0, 1.0 };
            var expected = new[] { 5.0, 4.0, 3.0, 2.0, 1.0 };
            var dataCopy = (double[])data.Clone();

            // Act
            var result = ArrayStatistics.RanksInplace(dataCopy, RankDefinition.First);

            // Assert
            CollectionAssert.AreEqual(expected, result);
        }

        [TestMethod]
        public void RanksInplace_WithTies_Average_ReturnsCorrectRanks()
        {
            // Arrange
            var data = new[] { 1.0, 2.0, 2.0, 3.0 };
            var expected = new[] { 1.0, 2.5, 2.5, 4.0 };
            var dataCopy = (double[])data.Clone();

            // Act
            var result = ArrayStatistics.RanksInplace(dataCopy, RankDefinition.Average);

            // Assert
            for (int i = 0; i < expected.Length; i++)
            {
                Assert.AreEqual(expected[i], result[i], Delta);
            }
        }

        [TestMethod]
        public void RanksInplace_WithTies_Min_ReturnsCorrectRanks()
        {
            // Arrange
            var data = new[] { 1.0, 2.0, 2.0, 3.0 };
            var expected = new[] { 1.0, 2.0, 2.0, 4.0 };
            var dataCopy = (double[])data.Clone();

            // Act
            var result = ArrayStatistics.RanksInplace(dataCopy, RankDefinition.Min);

            // Assert
            CollectionAssert.AreEqual(expected, result);
        }

        [TestMethod]
        public void RanksInplace_WithTies_Max_ReturnsCorrectRanks()
        {
            // Arrange
            var data = new[] { 1.0, 2.0, 2.0, 3.0 };
            var expected = new[] { 1.0, 3.0, 3.0, 4.0 };
            var dataCopy = (double[])data.Clone();

            // Act
            var result = ArrayStatistics.RanksInplace(dataCopy, RankDefinition.Max);

            // Assert
            CollectionAssert.AreEqual(expected, result);
        }

        [TestMethod]
        public void RanksInplace_SingleElement_ReturnsRankOne()
        {
            // Arrange
            var data = new[] { 42.0 };
            var expected = new[] { 1.0 };
            var dataCopy = (double[])data.Clone();

            // Act
            var result = ArrayStatistics.RanksInplace(dataCopy, RankDefinition.Average);

            // Assert
            CollectionAssert.AreEqual(expected, result);
        }

        [TestMethod]
        public void RanksInplace_AllEqual_ReturnsEqualRanks()
        {
            // Arrange
            var data = new[] { 1.0, 1.0, 1.0, 1.0 };
            var expected = new[] { 2.5, 2.5, 2.5, 2.5 };
            var dataCopy = (double[])data.Clone();

            // Act
            var result = ArrayStatistics.RanksInplace(dataCopy, RankDefinition.Average);

            // Assert
            for (int i = 0; i < expected.Length; i++)
            {
                Assert.AreEqual(expected[i], result[i], Delta);
            }
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void RanksInplace_NullInput_ThrowsArgumentNullException()
        {
            // Act
            ArrayStatistics.RanksInplace(null, RankDefinition.Average);
        }

        [TestMethod]
        public void RanksInplace_EmptyArray_ReturnsEmptyArray()
        {
            // Arrange
            var data = new double[0];

            // Act
            var result = ArrayStatistics.RanksInplace(data, RankDefinition.Average);

            // Assert
            Assert.AreEqual(0, result.Length);
        }

        [TestMethod]
        public void RanksInplace_ModifiesOriginalArray()
        {
            // Arrange
            var data = new[] { 3.0, 1.0, 2.0 };
            var originalData = (double[])data.Clone();

            // Act
            ArrayStatistics.RanksInplace(data, RankDefinition.Average);

            // Assert
            CollectionAssert.AreNotEqual(originalData, data, "Original array should be modified");
        }
    }
}


Error Messages:
Here are the error messages reported by the IDE:
Severity	Code	Description	Line	Details
Error (active)	CS0121	The call is ambiguous between the following methods or properties: 'ArrayStatistics.RanksInplace(float[], RankDefinition)' and 'ArrayStatistics.RanksInplace(double[], RankDefinition)'	127	

Inital Task:
Here is the inital Task that was provided for generating the test:
Create a test class using the MSTest framework to test the RanksInplace method from the ArrayStatistics class. The goal is to validate the method's functionality across different scenarios, including typical and edge cases, ensuring it handles both valid and invalid inputs appropriately.

The method to be tested is:

using System;

namespace MathNet.Numerics.Statistics
{
    /// <summary>
    /// Statistics operating on arrays assumed to be unsorted.
    /// WARNING: Methods with the Inplace-suffix may modify the data array by reordering its entries.
    /// </summary>
    /// <seealso cref="SortedArrayStatistics"/>
    /// <seealso cref="StreamingStatistics"/>
    /// <seealso cref="Statistics"/>
    public static partial class ArrayStatistics
    {
		/// <summary>
		/// Evaluates the rank of each entry of the unsorted data array.
		/// The rank definition can be specified to be compatible
		/// with an existing system.
		/// WARNING: Works inplace and can thus causes the data array to be reordered.
		/// </summary>
		public static double[] RanksInplace(double[] data, RankDefinition definition = RankDefinition.Default)
		{
			var ranks = new double[data.Length];
			var index = new int[data.Length];
			for (int i = 0; i < index.Length; i++)
			{
				index[i] = i;
			}

			if (definition == RankDefinition.First)
			{
				Sorting.SortAll(data, index);
				for (int i = 0; i < ranks.Length; i++)
				{
					ranks[index[i]] = i + 1;
				}

				return ranks;
			}

			Sorting.Sort(data, index);
			int previousIndex = 0;
			for (int i = 1; i < data.Length; i++)
			{
				if (Math.Abs(data[i] - data[previousIndex]) <= 0d)
				{
					continue;
				}

				if (i == previousIndex + 1)
				{
					ranks[index[previousIndex]] = i;
				}
				else
				{
					RanksTies(ranks, index, previousIndex, i, definition);
				}

				previousIndex = i;
			}

			RanksTies(ranks, index, previousIndex, data.Length, definition);
			return ranks;
		}
	}
}

Here are additional project-specific details referenced in the method:

RankDefinition: An enumeration used to define how ties are handled in statistical ranking calculations.
- Namespace: MathNet.Numerics.Statistics
- Values:
  - `Average`: Replace ties with their mean (default behavior).
  - `Min`: Replace ties with their minimum (typical in sports ranking).
  - `Max`: Replace ties with their maximum.


Sorting: Sorting algorithms for single, tuple and triple lists
- Namespace: MathNet.Numerics

RanksTies
- Method signature: static void RanksTies(double[] ranks, int[] index, int a, int b, RankDefinition definition)
- Namespace: MathNet.Numerics.Statistics.ArrayStatistics

