The generated MSTest test compiles but fails during execution. Please correct the tests to fulfill the initial task.

Generated Test:
Below is the generated MSTest test that does not compile:
        [TestMethod]
        public void Roots_LargeCoefficients_ReturnsValidResults()
        {
            // Test with large coefficients to check numerical stability
            var (root1, root2, root3) = Cubic.Roots(1e6, 1e6, 1e6, 1);

            // Verify roots satisfy the equation approximately
            Complex EvaluateAtRoot(Complex root)
            {
                return root * root * root + 1e6 * root * root + 1e6 * root + 1e6;
            }

            Assert.IsTrue(Complex.Abs(EvaluateAtRoot(root1)) < 1e-3);
            Assert.IsTrue(Complex.Abs(EvaluateAtRoot(root2)) < 1e-3);
            Assert.IsTrue(Complex.Abs(EvaluateAtRoot(root3)) < 1e-3);
        }
		Here are the error messages reported by the IDE:
		Assert.IsTrue failed.
		
		        [TestMethod]
        public void Roots_OneRealTwoComplex_ReturnsCorrectValues()
        {
            // x³ + x = 0
            // Has roots 0 and ±i
            var (root1, root2, root3) = Cubic.Roots(0, 1, 0, 1);

            // Sort roots by real part to ensure consistent ordering
            var roots = new[] { root1, root2, root3 };
            Array.Sort(roots, (x, y) => x.Real.CompareTo(y.Real));

            Assert.AreEqual(-1.0, roots[0].Imaginary, Precision);
            Assert.AreEqual(0.0, roots[1].Real, Precision);
            Assert.AreEqual(0.0, roots[1].Imaginary, Precision);
            Assert.AreEqual(1.0, roots[2].Imaginary, Precision);
        }
		Assert.AreEqual failed. Expected a difference no greater than <1E-10> between expected value <0> and actual value <1>. 
		
		        [TestMethod]
        public void Roots_SimpleRealRoots_ReturnsCorrectValues()
        {
            // x³ - 6x² + 11x - 6 = 0
            // Roots are 1, 2, and 3
            var (root1, root2, root3) = Cubic.Roots(-6, 11, -6, 1);

            Assert.AreEqual(1.0, root1.Real, Precision);
            Assert.AreEqual(0.0, root1.Imaginary, Precision);
            Assert.AreEqual(2.0, root2.Real, Precision);
            Assert.AreEqual(0.0, root2.Imaginary, Precision);
            Assert.AreEqual(3.0, root3.Real, Precision);
            Assert.AreEqual(0.0, root3.Imaginary, Precision);
        }
		 Assert.AreEqual failed. Expected a difference no greater than <1E-10> between expected value <2> and actual value <3>. 
		 
		        [TestMethod]
        [ExpectedException(typeof(DivideByZeroException))]
        public void Roots_ZeroLeadingCoefficient_ThrowsException()
        {
            // This should throw because a=0 makes it not a cubic equation
            Cubic.Roots(1, 1, 1, 0);
        }
		Test method did not throw expected exception System.DivideByZeroException. 


Inital Task:
Here is the inital Task that was provided for generating the test:
Create a test class using the MSTest framework to test the Roots method from the Cubic class. The goal is to validate the method's functionality across different scenarios, including typical and edge cases, ensuring it handles both valid and invalid inputs appropriately.

The method to be tested is:

using System;
using Complex = System.Numerics.Complex;

namespace MathNet.Numerics.RootFinding
{
    /// <summary>
    /// Finds roots to the cubic equation x^3 + a2*x^2 + a1*x + a0 = 0
    /// Implements the cubic formula in http://mathworld.wolfram.com/CubicFormula.html
    /// </summary>
    public static class Cubic
    {
	    public static (Complex, Complex, Complex) Roots(double d, double c, double b, double a)
        {
            double A = b*b - 3*a*c;
            double B = 2*b*b*b - 9*a*b*c + 27*a*a*d;
            double s = -1/(3*a);

            double D = (B*B - 4*A*A*A)/(-27*a*a);
            if (D == 0d)
            {
                if (A == 0d)
                {
                    var u = new Complex(s*b, 0d);
                    return (u, u, u);
                }

                var v = new Complex((9*a*d - b*c)/(2*A), 0d);
                var w = new Complex((4*a*b*c - 9*a*a*d - b*b*b)/(a*A), 0d);
                return (v, v, w);
            }

            var C = (A == 0)
                ? new Complex(B, 0d).CubicRoots()
                : ((B + Complex.Sqrt(B*B - 4*A*A*A))/2).CubicRoots();

            return (s*(b + C.Item1 + A/C.Item1), s*(b + C.Item2 + A/C.Item2), s*(b + C.Item3 + A/C.Item3));
        }
    }
}

Here are additional project-specific details referenced in the method:

Complex: A structure representing complex numbers with real and imaginary parts. It provides methods for mathematical operations
- Constructor: public Complex(double real, double imaginary)
- Namespace: System.Numerics

