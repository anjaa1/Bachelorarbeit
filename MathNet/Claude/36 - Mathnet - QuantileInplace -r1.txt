The generated MSTest test does not compile. Please correct the tests to fulfill the initial task.

Generated Test:
Below is the generated MSTest test class that does not compile:
using Microsoft.VisualStudio.TestTools.UnitTesting;
using MathNet.Numerics.Statistics;
using System;

namespace MathNet.Numerics.Tests.StatisticsTests
{
    [TestClass]
    public class ArrayStatisticsQuantileTests
    {
        private const double Delta = 1e-10; // Tolerance for floating-point comparisons

        [TestMethod]
        public void QuantileInplace_MedianOfOddLengthArray_ReturnsCorrectValue()
        {
            // Arrange
            double[] data = { 1.0, 5.0, 3.0, 2.0, 4.0 };
            double expected = 3.0;
            double tau = 0.5; // Median

            // Act
            double result = ArrayStatistics.QuantileInplace(data, tau);

            // Assert
            Assert.AreEqual(expected, result, Delta);
        }

        [TestMethod]
        public void QuantileInplace_MedianOfEvenLengthArray_ReturnsInterpolatedValue()
        {
            // Arrange
            double[] data = { 1.0, 4.0, 2.0, 3.0 };
            double expected = 2.5;
            double tau = 0.5;

            // Act
            double result = ArrayStatistics.QuantileInplace(data);

            // Assert
            Assert.AreEqual(expected, result, Delta);
        }

        [TestMethod]
        public void QuantileInplace_FirstQuartile_ReturnsCorrectValue()
        {
            // Arrange
            double[] data = { 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0 };
            double expected = 2.0;
            double tau = 0.25;

            // Act
            double result = ArrayStatistics.QuantileInplace(data, tau);

            // Assert
            Assert.AreEqual(expected, result, Delta);
        }

        [TestMethod]
        public void QuantileInplace_ThirdQuartile_ReturnsCorrectValue()
        {
            // Arrange
            double[] data = { 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0 };
            double expected = 6.0;
            double tau = 0.75;

            // Act
            double result = ArrayStatistics.QuantileInplace(data, tau);

            // Assert
            Assert.AreEqual(expected, result, Delta);
        }

        [TestMethod]
        public void QuantileInplace_TauZero_ReturnsMinimum()
        {
            // Arrange
            double[] data = { 3.0, 1.0, 4.0, 2.0 };
            double expected = 1.0;
            double tau = 0.0;

            // Act
            double result = ArrayStatistics.QuantileInplace(data, tau);

            // Assert
            Assert.AreEqual(expected, result, Delta);
        }

        [TestMethod]
        public void QuantileInplace_TauOne_ReturnsMaximum()
        {
            // Arrange
            double[] data = { 3.0, 1.0, 4.0, 2.0 };
            double expected = 4.0;
            double tau = 1.0;

            // Act
            double result = ArrayStatistics.QuantileInplace(data, tau);

            // Assert
            Assert.AreEqual(expected, result, Delta);
        }

        [TestMethod]
        public void QuantileInplace_EmptyArray_ReturnsNaN()
        {
            // Arrange
            double[] data = new double[0];
            double tau = 0.5;

            // Act
            double result = ArrayStatistics.QuantileInplace(data, tau);

            // Assert
            Assert.IsTrue(double.IsNaN(result));
        }

        [TestMethod]
        public void QuantileInplace_NegativeTau_ReturnsNaN()
        {
            // Arrange
            double[] data = { 1.0, 2.0, 3.0 };
            double tau = -0.1;

            // Act
            double result = ArrayStatistics.QuantileInplace(data, tau);

            // Assert
            Assert.IsTrue(double.IsNaN(result));
        }

        [TestMethod]
        public void QuantileInplace_TauGreaterThanOne_ReturnsNaN()
        {
            // Arrange
            double[] data = { 1.0, 2.0, 3.0 };
            double tau = 1.1;

            // Act
            double result = ArrayStatistics.QuantileInplace(data, tau);

            // Assert
            Assert.IsTrue(double.IsNaN(result));
        }

        [TestMethod]
        public void QuantileInplace_SingleElementArray_ReturnsElement()
        {
            // Arrange
            double[] data = { 42.0 };
            double expected = 42.0;
            double tau = 0.5;

            // Act
            double result = ArrayStatistics.QuantileInplace(data, tau);

            // Assert
            Assert.AreEqual(expected, result, Delta);
        }

        [TestMethod]
        public void QuantileInplace_ModifiesOriginalArray()
        {
            // Arrange
            double[] original = { 3.0, 1.0, 4.0, 2.0 };
            double[] data = (double[])original.Clone();
            double tau = 0.5;

            // Act
            ArrayStatistics.QuantileInplace(data, tau);

            // Assert
            CollectionAssert.AreNotEqual(original, data);
        }
    }
}


Error Messages:
Here are the error messages reported by the IDE:
Severity	Code	Description	Line	Details
Error (active)	CS1501	No overload for method 'QuantileInplace' takes 1 arguments	36	


Inital Task:
Here is the inital Task that was provided for generating the test:
Create a test class using the MSTest framework to test the QuantileInplace method from the ArrayStatistics class. The goal is to validate the method's functionality across different scenarios, including typical and edge cases, ensuring it handles both valid and invalid inputs appropriately.

The method to be tested is:

using System;

namespace MathNet.Numerics.Statistics
{
    /// <summary>
    /// Statistics operating on arrays assumed to be unsorted.
    /// WARNING: Methods with the Inplace-suffix may modify the data array by reordering its entries.
    /// </summary>
    /// <seealso cref="SortedArrayStatistics"/>
    /// <seealso cref="StreamingStatistics"/>
    /// <seealso cref="Statistics"/>
    public static partial class ArrayStatistics
    {
        /// <summary>
        /// Estimates the tau-th quantile from the unsorted data array.
        /// The tau-th quantile is the data value where the cumulative distribution
        /// function crosses tau.
        /// Approximately median-unbiased regardless of the sample distribution (R8).
        /// WARNING: Works inplace and can thus causes the data array to be reordered.
        /// </summary>
        /// <param name="data">Sample array, no sorting is assumed. Will be reordered.</param>
        /// <param name="tau">Quantile selector, between 0.0 and 1.0 (inclusive).</param>
        /// <remarks>
        /// R-8, SciPy-(1/3,1/3):
        /// Linear interpolation of the approximate medians for order statistics.
        /// When tau &lt; (2/3) / (N + 1/3), use x1. When tau &gt;= (N - 1/3) / (N + 1/3), use xN.
        /// </remarks>
        public static double QuantileInplace(double[] data, double tau)
        {
            if (tau < 0d || tau > 1d || data.Length == 0)
            {
                return double.NaN;
            }

            double h = (data.Length + 1d/3d)*tau + 1d/3d;
            var hf = (int)h;

            if (hf <= 0 || tau == 0d)
            {
                return Minimum(data);
            }

            if (hf >= data.Length || tau == 1d)
            {
                return Maximum(data);
            }

            var a = SelectInplace(data, hf - 1);
            var b = SelectInplace(data, hf);
            return a + (h - hf)*(b - a);
        }
	}
}

