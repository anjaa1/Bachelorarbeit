The generated MSTest test does not compile. Please correct the tests to fulfill the initial task.

Generated Test:
Below is the generated MSTest test class that does not compile:
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.Linq;

namespace MathNet.Numerics.Tests
{
    [TestClass]
    public class SeriesTests
    {
        [TestMethod]
        public void Evaluate_EmptySequence_ReturnsZero()
        {
            // Arrange
            var emptySequence = Enumerable.Empty<double>();

            // Act
            double result = Series.Evaluate(emptySequence);

            // Assert
            Assert.AreEqual(0.0, result);
        }

        [TestMethod]
        public void Evaluate_SingleElement_ReturnsThatElement()
        {
            // Arrange
            var singleElement = new[] { 5.0 };

            // Act
            double result = Series.Evaluate(singleElement);

            // Assert
            Assert.AreEqual(5.0, result);
        }

        [TestMethod]
        public void Evaluate_SimpleSequence_ReturnsCorrectSum()
        {
            // Arrange
            var sequence = new[] { 1.0, 2.0, 3.0, 4.0, 5.0 };
            double expectedSum = 15.0;

            // Act
            double result = Series.Evaluate(sequence);

            // Assert
            Assert.AreEqual(expectedSum, result, 1e-10);
        }

        [TestMethod]
        public void Evaluate_SequenceWithNegativeNumbers_ReturnsCorrectSum()
        {
            // Arrange
            var sequence = new[] { -1.0, 2.0, -3.0, 4.0, -5.0 };
            double expectedSum = -3.0;

            // Act
            double result = Series.Evaluate(sequence);

            // Assert
            Assert.AreEqual(expectedSum, result, 1e-10);
        }

        [TestMethod]
        public void Evaluate_LargeNumbers_HandlesCorrectly()
        {
            // Arrange
            var sequence = new[] { 1e15, 1e14, 1e13 };
            double expectedSum = 1.11e15;

            // Act
            double result = Series.Evaluate(sequence);

            // Assert
            Assert.AreEqual(expectedSum, result, 1e5);
        }

        [TestMethod]
        public void Evaluate_SmallNumbers_HandlesCorrectly()
        {
            // Arrange
            var sequence = new[] { 1e-15, 1e-14, 1e-13 };
            double expectedSum = 1.11e-13;

            // Act
            double result = Series.Evaluate(sequence);

            // Assert
            Assert.AreEqual(expectedSum, result, 1e-25);
        }

        [TestMethod]
        public void Evaluate_AlternatingSequence_HandlesCorrectly()
        {
            // Arrange
            var sequence = new[] { 1.0, -1.0, 1.0, -1.0, 1.0 };
            double expectedSum = 1.0;

            // Act
            double result = Series.Evaluate(sequence);

            // Assert
            Assert.AreEqual(expectedSum, result, 1e-10);
        }

        [TestMethod]
        public void Evaluate_InfiniteSequence_StopsAutomatically()
        {
            // Arrange
            IEnumerable<double> infiniteSequence = GenerateGeometricSequence(2.0, 0.5);

            // Act
            double result = Series.Evaluate(infiniteSequence);

            // Assert
            Assert.AreEqual(4.0, result, 1e-10);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void Evaluate_NullSequence_ThrowsArgumentNullException()
        {
            // Act
            Series.Evaluate(null);
        }

        // Helper method to generate an infinite geometric sequence
        private IEnumerable<double> GenerateGeometricSequence(double firstTerm, double ratio)
        {
            double currentTerm = firstTerm;
            while (true)
            {
                yield return currentTerm;
                currentTerm *= ratio;
            }
        }
    }
}


Error Messages:
Here are the error messages reported by the IDE:
Severity	Code	Description	Line	Details
Error (active)	CS0121	The call is ambiguous between the following methods or properties: 'Series.Evaluate(Func<double>)' and 'Series.Evaluate(IEnumerable<double>)'	125	


Inital Task:
Here is the inital Task that was provided for generating the test:
Create a test class using the MSTest framework to test the Evaluate method from the Series class. The goal is to validate the method's functionality across different scenarios, including typical and edge cases, ensuring it handles both valid and invalid inputs appropriately.

The method to be tested is:

using System;
using System.Collections.Generic;

namespace MathNet.Numerics
{
    public static class Series
    {
        /// <summary>
        /// Numerically stable series summation (stops automatically).
        /// </summary>
        /// <param name="infiniteSummands">provides the summands sequentially</param>
        /// <returns>Sum</returns>
        public static double Evaluate(IEnumerable<double> infiniteSummands)
        {
            double compensation = 0.0;
            double current, sum;
            const double factor = 1 << 16;

            using (var enumerator = infiniteSummands.GetEnumerator())
            {
                if (!enumerator.MoveNext())
                {
                    return 0.0;
                }

                sum = enumerator.Current;
                if (!enumerator.MoveNext())
                {
                    return sum;
                }

                do
                {
                    // Kahan Summation
                    // NOTE (ruegg): do NOT optimize. Now, how to tell that the compiler?
                    current = enumerator.Current;
                    double y = current - compensation;
                    double t = sum + y;
                    compensation = t - sum;
                    compensation -= y;
                    sum = t;
                } while (Math.Abs(sum) < Math.Abs(factor * current) && enumerator.MoveNext());
            }

            return sum;
        }
    }
}

