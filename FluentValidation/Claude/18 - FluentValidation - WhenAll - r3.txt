The generated MSTest test compiles but fails during execution. Please correct the tests to fulfill the initial task.

Generated Test:
Below is the generated MSTest test that does not compile:
using Microsoft.VisualStudio.TestTools.UnitTesting;
using FluentValidation.Results;
using FluentValidation.TestHelper;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace FluentValidation.Tests {
	[TestClass]
	public class ValidationTestExtensionTests {
		public class TestValidationWrapper : ITestValidationContinuation {
			private readonly List<ValidationFailure> _allFailures;
			private readonly List<ValidationFailure> _matchedFailures;
			private readonly List<ValidationFailure> _unmatchedFailures;

			public TestValidationWrapper(IEnumerable<ValidationFailure> failures) {
				_allFailures = failures.ToList();
				_matchedFailures = failures.ToList();
				_unmatchedFailures = new List<ValidationFailure>();
			}

			public IEnumerable<ValidationFailure> UnmatchedFailures => _unmatchedFailures;

			public IEnumerable<ValidationFailure> MatchedFailures => _matchedFailures;

			public void SetUnmatched(ValidationFailure failure) {
				if (!_unmatchedFailures.Contains(failure)) {
					_unmatchedFailures.Add(failure);
					_matchedFailures.Remove(failure);
				}
			}

			public IEnumerator<ValidationFailure> GetEnumerator() {
				return _allFailures.GetEnumerator();
			}

			IEnumerator IEnumerable.GetEnumerator() {
				return GetEnumerator();
			}
		}

		[TestMethod]
		public void WhenAll_AllFailuresMatchPredicate_ReturnsSuccessfully() {
			// Arrange
			var failures = new List<ValidationFailure>
			{
								new ValidationFailure("Property1", "Error1"),
								new ValidationFailure("Property2", "Error2")
						};
			var continuation = new TestValidationWrapper(failures);

			// Act
			var result = continuation.WhenAll(f => true);

			// Assert
			Assert.IsNotNull(result);
			Assert.IsFalse(result.UnmatchedFailures.Any());
		}
		Test method FluentValidation.Tests.ValidationTestExtensionTests.WhenAll_AllFailuresMatchPredicate_ReturnsSuccessfully threw exception: 
System.InvalidCastException: Unable to cast object of type 'TestValidationWrapper' to type 'FluentValidation.TestHelper.TestValidationContinuation'.

		[TestMethod]
		public void WhenAll_NoFailuresMatchPredicate_ThrowsValidationTestException() {
			// Arrange
			var failures = new List<ValidationFailure>
			{
								new ValidationFailure("Property1", "Error1"),
								new ValidationFailure("Property2", "Error2")
						};
			var continuation = new TestValidationWrapper(failures);

			// Act & Assert
			var exception = Assert.ThrowsException<ValidationTestException>(() =>
					continuation.WhenAll(f => false));

			Assert.IsTrue(exception.Message.Contains("Found an unexpected validation error"));
		}
		  Assert.ThrowsException failed. Threw exception InvalidCastException, but exception ValidationTestException was expected. 
Exception Message: Unable to cast object of type 'TestValidationWrapper' to type 'FluentValidation.TestHelper.TestValidationContinuation'.

		[TestMethod]
		public void WhenAll_PartialFailuresMatch_ThrowsValidationTestException() {
			// Arrange
			var failures = new List<ValidationFailure>
			{
								new ValidationFailure("Property1", "Error1"),
								new ValidationFailure("Property2", "Error2")
						};
			var continuation = new TestValidationWrapper(failures);

			// Act & Assert
			var exception = Assert.ThrowsException<ValidationTestException>(() =>
					continuation.WhenAll(f => f.PropertyName == "Property1"));

			Assert.IsTrue(exception.Message.Contains("Found an unexpected validation error"));
		}
		 Assert.ThrowsException failed. Threw exception InvalidCastException, but exception ValidationTestException was expected. 
Exception Message: Unable to cast object of type 'TestValidationWrapper' to type 'FluentValidation.TestHelper.TestValidationContinuation'.

		[TestMethod]
		public void WhenAll_WithCustomExceptionMessage_ThrowsWithCustomMessage() {
			// Arrange
			var failures = new List<ValidationFailure>
			{
								new ValidationFailure("Property1", "Error1")
						};
			var continuation = new TestValidationWrapper(failures);
			var customMessage = "Custom error message";

			// Act & Assert
			var exception = Assert.ThrowsException<ValidationTestException>(() =>
					continuation.WhenAll(f => false, customMessage));

			Assert.IsTrue(exception.Message.Contains(customMessage));
		}
		 Assert.ThrowsException failed. Threw exception InvalidCastException, but exception ValidationTestException was expected. 
Exception Message: Unable to cast object of type 'TestValidationWrapper' to type 'FluentValidation.TestHelper.TestValidationContinuation'.

		[TestMethod]
		public void WhenAll_EmptyFailureList_ReturnsSuccessfully() {
			// Arrange
			var continuation = new TestValidationWrapper(new List<ValidationFailure>());

			// Act
			var result = continuation.WhenAll(f => true);

			// Assert
			Assert.IsNotNull(result);
			Assert.IsFalse(result.UnmatchedFailures.Any());
		}
		Test method FluentValidation.Tests.ValidationTestExtensionTests.WhenAll_EmptyFailureList_ReturnsSuccessfully threw exception: 
System.InvalidCastException: Unable to cast object of type 'TestValidationWrapper' to type 'FluentValidation.TestHelper.TestValidationContinuation'.

		[TestMethod]
		public void WhenAll_NullPredicate_ThrowsArgumentNullException() {
			// Arrange
			var failures = new List<ValidationFailure>
			{
								new ValidationFailure("Property1", "Error1")
						};
			var continuation = new TestValidationWrapper(failures);

			// Act & Assert
			Assert.ThrowsException<ArgumentNullException>(() =>
					continuation.WhenAll(null));
		}
		Assert.ThrowsException failed. Threw exception InvalidCastException, but exception ArgumentNullException was expected. 
Exception Message: Unable to cast object of type 'TestValidationWrapper' to type 'FluentValidation.TestHelper.TestValidationContinuation'.
	}
}

Error Messages:
Here are the error messages reported by the IDE:
[Insert error message]

Inital Task:
Here is the inital Task that was provided for generating the test:
Create a test class using the MSTest framework to test the WhenAll method from the ValidationTestExtension class. The goal is to validate the method's functionality across different scenarios, including typical and edge cases, ensuring it handles both valid and invalid inputs appropriately.

The method to be tested is:

namespace FluentValidation.TestHelper;

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using Internal;
using Results;
using Validators;

public static class ValidationTestExtension {
	internal const string MatchAnyFailure = "__FV__ANY";

	public static ITestValidationContinuation WhenAll(this ITestValidationContinuation failures, Func<ValidationFailure, bool> failurePredicate, string exceptionMessage = null) {
		//TODO 12.0 remove casts.
		var result = new TestValidationContinuation(((TestValidationContinuation)failures).MatchedFailures, failures);
		result.ApplyPredicate(failurePredicate);

		bool allMatched = !result.UnmatchedFailures.Any();

		if (!allMatched) {
			var failure = result.UnmatchedFailures.First();
			string message = BuildErrorMessage(failure, exceptionMessage, "Found an unexpected validation error");
			throw new ValidationTestException(message);
		}

		return result;
	}
}

Here are additional project-specific details referenced in the method:
ValidationFailure:
- namespace: FluentValidation.Results
- property: string Errormessage
- Constructor: ValidationFailure(string propertyName, string errorMessage)

ITestValidationContinuation
- namespace: FluentValidation.TestHelper
- interface: public interface ITestValidationContinuation : IEnumerable<ValidationFailure> {
	IEnumerable<ValidationFailure> UnmatchedFailures { get; }
}
- Properties: IEnumerable<ValidationFailure> UnmatchedFailures
- methods: IEnumerator<ValidationFailure> GetEnumerator()
- dependencies: ValidationFailure (Namespace: FluentValidation.Results)

here is the interface: namespace FluentValidation.TestHelper;

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Results;

public interface ITestValidationWith : ITestValidationContinuation {
}

public interface ITestValidationContinuation : IEnumerable<ValidationFailure> {
	IEnumerable<ValidationFailure> UnmatchedFailures { get; }
	//TODO: 12.x expose MatchedFailures on the interface too.
}

internal class TestValidationContinuation : ITestValidationContinuation, ITestValidationWith {
	private readonly IEnumerable<ValidationFailure> _allFailures;
	private readonly List<Func<ValidationFailure,bool>> _predicates;

	public ITestValidationContinuation Parent { get; }

	public TestValidationContinuation(IEnumerable<ValidationFailure> failures, ITestValidationContinuation parent = null) {
		_allFailures = failures;
		_predicates = new List<Func<ValidationFailure, bool>>();
		Parent = parent;
	}

	public void ApplyPredicate(Func<ValidationFailure, bool> failurePredicate) {
		_predicates.Add(failurePredicate);
	}

	public IEnumerator<ValidationFailure> GetEnumerator() {
		return MatchedFailures.GetEnumerator();
	}

	IEnumerator IEnumerable.GetEnumerator() {
		return ((IEnumerable) MatchedFailures).GetEnumerator();
	}

	public IEnumerable<ValidationFailure> MatchedFailures {
		get {
			var matchedFailures = _allFailures;
			foreach (var predicate in _predicates) {
				matchedFailures = matchedFailures.Where(predicate);
			}

			return matchedFailures;
		}
	}

	public IEnumerable<ValidationFailure> UnmatchedFailures {
		get {
			foreach (var failure in _allFailures) {
				foreach (var predicate in _predicates) {
					if (!predicate(failure)) {
						yield return failure;
						break;
					}
				}
			}
		}
	}
}
