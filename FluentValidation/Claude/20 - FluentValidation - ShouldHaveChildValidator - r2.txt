The generated MSTest test does not compile. Please correct the tests to fulfill the initial task.

Generated Test:
Below is the generated MSTest test class that does not compile:
using Microsoft.VisualStudio.TestTools.UnitTesting;
using FluentValidation;
using FluentValidation.TestHelper;
using System;
using System.Linq.Expressions;

namespace FluentValidation.Tests {
	[TestClass]
	public class ValidationTestExtensionTests {
		// Test models
		private class TestModel {
			public ChildModel Child { get; set; }
			public string Name { get; set; }
		}

		private class ChildModel {
			public string Property { get; set; }
		}

		// Test validators
		private class ChildValidator : AbstractValidator<ChildModel> {
			public ChildValidator() {
				RuleFor(x => x.Property).NotEmpty();
			}
		}

		private class TestModelValidator : AbstractValidator<TestModel> {
			public TestModelValidator() {
				RuleFor(x => x.Child).SetValidator(new ChildValidator());
				RuleFor(x => x.Name).NotEmpty();
			}
		}

		private class ModelWithChildValidator : AbstractValidator<TestModel> {
			public ModelWithChildValidator() {
				RuleForEach(x => x).SetValidator(new ChildValidator());
			}
		}

		private class DifferentChildValidator : AbstractValidator<ChildModel> {
			public DifferentChildValidator() {
				RuleFor(x => x.Property).NotNull();
			}
		}

		private TestModelValidator validator;

		[TestInitialize]
		public void Setup() {
			validator = new TestModelValidator();
		}

		[TestMethod]
		public void ShouldHaveChildValidator_WhenChildValidatorExists_ShouldNotThrow() {
			// Arrange
			Expression<Func<TestModel, ChildModel>> expression = x => x.Child;

			// Act & Assert
			validator.ShouldHaveChildValidator(expression, typeof(ChildValidator));
		}

		[TestMethod]
		public void ShouldHaveChildValidator_WhenChildValidatorIsAssignableFrom_ShouldNotThrow() {
			// Arrange
			Expression<Func<TestModel, ChildModel>> expression = x => x.Child;

			// Act & Assert
			validator.ShouldHaveChildValidator(expression, typeof(IValidator<ChildModel>));
		}

		[TestMethod]
		[ExpectedException(typeof(ValidationTestException))]
		public void ShouldHaveChildValidator_WhenChildValidatorDoesNotExist_ShouldThrow() {
			// Arrange
			Expression<Func<TestModel, string>> expression = x => x.Name;

			// Act & Assert
			validator.ShouldHaveChildValidator(expression, typeof(ChildValidator));
		}

		[TestMethod]
		[ExpectedException(typeof(ValidationTestException))]
		public void ShouldHaveChildValidator_WhenWrongChildValidatorType_ShouldThrow() {
			// Arrange
			Expression<Func<TestModel, ChildModel>> expression = x => x.Child;

			// Act & Assert
			validator.ShouldHaveChildValidator(expression, typeof(DifferentChildValidator));
		}

		[TestMethod]
		[ExpectedException(typeof(NotSupportedException))]
		public void ShouldHaveChildValidator_WhenComplexExpression_ShouldThrow() {
			// Arrange
			Expression<Func<TestModel, string>> expression = x => x.Child.Property + "suffix";

			// Act & Assert
			validator.ShouldHaveChildValidator(expression, typeof(ChildValidator));
		}

		[TestMethod]
		public void ShouldHaveChildValidator_WhenParameterExpression_ShouldNotThrow() {
			// Arrange
			var modelValidator = new ModelWithChildValidator();
			Expression<Func<TestModel, TestModel>> expression = x => x;

			// Act & Assert
			modelValidator.ShouldHaveChildValidator(expression, typeof(ChildValidator));
		}
	}
}



Error Messages:
Here are the error messages reported by the IDE:
Severity	Code	Description	Project	File	Line	Suppression State	Details
Error (active)	CS0411	The type arguments for method 'AbstractValidator<ValidationTestExtensionTests.TestModel>.RuleForEach<TElement>(Expression<Func<ValidationTestExtensionTests.TestModel, IEnumerable<TElement>>>)' cannot be inferred from the usage. Try specifying the type arguments explicitly.	BenchmarkingTest	C:\EigeneProjekte\FluentValidation\BenchmarkingTest\Claude\20 - Claude - FluentValidation - r1.cs	36		
Error (active)	CS1503	Argument 1: cannot convert from 'FluentValidation.Tests.ValidationTestExtensionTests.ChildValidator' to 'FluentValidation.Validators.IPropertyValidator<FluentValidation.Tests.ValidationTestExtensionTests.TestModel, TElement>'	BenchmarkingTest	C:\EigeneProjekte\FluentValidation\BenchmarkingTest\Claude\20 - Claude - FluentValidation - r1.cs	36		


Inital Task:
Here is the inital Task that was provided for generating the test:
Create a test class using the MSTest framework to test the ShouldHaveChildValidator method from the ValidationTestExtension class. The goal is to validate the method's functionality across different scenarios, including typical and edge cases, ensuring it handles both valid and invalid inputs appropriately.

The method to be tested is:

namespace FluentValidation.TestHelper;

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using Internal;
using Results;
using Validators;

public static class ValidationTestExtension {
	internal const string MatchAnyFailure = "__FV__ANY";

	//TODO: Should ShouldHaveChildValidator be deprecated? It isn't recommended and leads to brittle tests.
	public static void ShouldHaveChildValidator<T, TProperty>(this IValidator<T> validator, Expression<Func<T, TProperty>> expression, Type childValidatorType) {
		var descriptor = validator.CreateDescriptor();
		var expressionMemberName = expression.GetMember()?.Name;

		if (expressionMemberName == null && !expression.IsParameterExpression()) {
			throw new NotSupportedException("ShouldHaveChildValidator can only be used for simple property expressions. It cannot be used for model-level rules or rules that contain anything other than a property reference.");
		}

		var matchingValidators =
			expression.IsParameterExpression() ? GetModelLevelValidators<T>(descriptor) :
				descriptor.GetValidatorsForMember(expressionMemberName)
					.Select(x => x.Validator)
					.ToArray();


		matchingValidators = matchingValidators.Concat(GetDependentRules(expressionMemberName, expression, descriptor)).ToArray();

		var childValidatorTypes = matchingValidators.OfType<IChildValidatorAdaptor>().Select(x => x.ValidatorType);

		if (childValidatorTypes.All(x => !childValidatorType.IsAssignableFrom(x))) {
			var childValidatorNames = childValidatorTypes.Any() ? string.Join(", ", childValidatorTypes.Select(x => x.Name)) : "none";
			throw new ValidationTestException(string.Format("Expected property '{0}' to have a child validator of type '{1}.'. Instead found '{2}'", expressionMemberName, childValidatorType.Name, childValidatorNames));
		}
	}
}

Here are additional project-specific details referenced in the method:
IValidator<T>
- namespace: FluentValidation
- inherits: IValidator
- methods:
	- ValidationResult Validate(T instance)
	- Task<ValidationResult> ValidateAsync(T instance, CancellationToken cancellation = default)

IValidator:
- namespace: FluentValidation
- methods:
	- ValidationResult Validate(IValidationContext context)
	- Task<ValidationResult> ValidateAsync(IValidationContext context, CancellationToken cancellation = default)
	- IValidatorDescriptor CreateDescriptor()
	- bool CanValidateInstancesOfType(Type type)
- dependencies:
	- ValidationResult (NameSpace: FluentValidation.Results)
	- IValidationContext (NameSpace: FluentValidation)

IsParameterExpression: Checks if the expression is a parameter expression
- namespace: FluentValidation.Internal

GetModelLevelValidators:
- namespace: FluentValidation.TestHelper
- method signature: private static IPropertyValidator[] GetModelLevelValidators<T>(IValidatorDescriptor descriptor)

GetDependentRules
- namespace: FluentValidation.TestHelper
- mathod signature: private static IEnumerable<IPropertyValidator> GetDependentRules<T, TProperty>(string expressionMemberName, Expression<Func<T, TProperty>> expression, IValidatorDescriptor descriptor)

IChildValidatorAdaptor
- namespace: FluentValidation.Validators
- property: Type ValidatorType

