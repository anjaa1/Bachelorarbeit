The generated MSTest test compiles but fails during execution. Please correct the tests to fulfill the initial task.

Generated Test:
Below is the generated MSTest test that does not compile:
using Microsoft.VisualStudio.TestTools.UnitTesting;
using FluentValidation.TestHelper;
using FluentValidation.Results;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using static System.Net.Mime.MediaTypeNames;
using System.Threading;

namespace FluentValidation.Tests {
	[TestClass]
	public class ValidationTestExtensionTests {
		// Custom implementation of ITestValidationWith for testing
		private class TestValidationImplementation : ITestValidationWith {
			private readonly IEnumerable<ValidationFailure> _unmatchedFailures;
			private readonly TestValidationImplementation _parent;

			public TestValidationImplementation(IEnumerable<ValidationFailure> unmatchedFailures, TestValidationImplementation parent = null) {
				_unmatchedFailures = unmatchedFailures;
				_parent = parent;
			}

			public IEnumerable<ValidationFailure> UnmatchedFailures => _unmatchedFailures;
			public TestValidationImplementation Parent => _parent;

			public IEnumerator<ValidationFailure> GetEnumerator() {
				return _unmatchedFailures.GetEnumerator();
			}

			IEnumerator IEnumerable.GetEnumerator() {
				return GetEnumerator();
			}
		}

		[TestMethod]
		public void Only_WithNoUnmatchedFailures_ReturnsOriginalObject() {
			// Arrange
			var validation = new TestValidationImplementation(Enumerable.Empty<ValidationFailure>());

			// Act
			var result = validation.Only();

			// Assert
			Assert.AreEqual(validation, result);
		}
		Test method FluentValidation.Tests.ValidationTestExtensionTests.Only_WithNoUnmatchedFailures_ReturnsOriginalObject threw exception: 
System.InvalidCastException: Unable to cast object of type 'TestValidationImplementation' to type 'FluentValidation.TestHelper.TestValidationContinuation'.

		[TestMethod]
		[ExpectedException(typeof(ValidationTestException))]
		public void Only_WithUnmatchedFailures_ThrowsValidationTestException() {
			// Arrange
			var unmatchedFailures = new List<ValidationFailure>
			{
								new ValidationFailure("PropertyName", "Error message 1"),
								new ValidationFailure("PropertyName", "Error message 2")
						};
			var validation = new TestValidationImplementation(unmatchedFailures);

			// Act
			validation.Only();
				}
		Test method threw exception System.InvalidCastException, but exception FluentValidation.TestHelper.ValidationTestException was expected.Exception message: System.InvalidCastException: Unable to cast object of type 'TestValidationImplementation' to type 'FluentValidation.TestHelper.TestValidationContinuation'.

		[TestMethod]
		public void Only_WithUnmatchedFailures_ThrowsExceptionWithCorrectMessage() {
			// Arrange
			var unmatchedFailures = new List<ValidationFailure>
			{
								new ValidationFailure("PropertyName", "Error message 1")
						};
			var validation = new TestValidationImplementation(unmatchedFailures);

			try {
				// Act
				validation.Only();
				Assert.Fail("Expected ValidationTestException was not thrown.");
			}
			catch (ValidationTestException ex) {
				// Assert
				StringAssert.Contains(ex.Message, "Expected to have errors only matching specified conditions");
				StringAssert.Contains(ex.Message, "[0]: Error message 1");
			}
		}
		Test method FluentValidation.Tests.ValidationTestExtensionTests.Only_WithUnmatchedFailures_ThrowsExceptionWithCorrectMessage threw exception: 
System.InvalidCastException: Unable to cast object of type 'TestValidationImplementation' to type 'FluentValidation.TestHelper.TestValidationContinuation'.

		[TestMethod]
		public void Only_WithParentContainingUnmatchedFailures_IncludesParentFailures() {
			// Arrange
			var parentFailures = new List<ValidationFailure>
			{
								new ValidationFailure("ParentProperty", "Parent error")
						};
			var childFailures = new List<ValidationFailure>
			{
								new ValidationFailure("ChildProperty", "Child error")
						};

			var parent = new TestValidationImplementation(parentFailures);
			var child = new TestValidationImplementation(childFailures, parent);

			try {
				// Act
				child.Only();
				Assert.Fail("Expected ValidationTestException was not thrown.");
			}
			catch (ValidationTestException ex) {
				// Assert
				StringAssert.Contains(ex.Message, "Parent error");
				StringAssert.Contains(ex.Message, "Child error");
			}
		}
		Test method FluentValidation.Tests.ValidationTestExtensionTests.Only_WithParentContainingUnmatchedFailures_IncludesParentFailures threw exception: 
System.InvalidCastException: Unable to cast object of type 'TestValidationImplementation' to type 'FluentValidation.TestHelper.TestValidationContinuation'.

		[TestMethod]
		public void Only_WithMultipleNestedParents_IncludesAllParentFailures() {
			// Arrange
			var grandParentFailures = new List<ValidationFailure>
			{
								new ValidationFailure("GrandParentProperty", "GrandParent error")
						};
			var parentFailures = new List<ValidationFailure>
			{
								new ValidationFailure("ParentProperty", "Parent error")
						};
			var childFailures = new List<ValidationFailure>
			{
								new ValidationFailure("ChildProperty", "Child error")
						};

			var grandParent = new TestValidationImplementation(grandParentFailures);
			var parent = new TestValidationImplementation(parentFailures, grandParent);
			var child = new TestValidationImplementation(childFailures, parent);

			try {
				// Act
				child.Only();
				Assert.Fail("Expected ValidationTestException was not thrown.");
			}
			catch (ValidationTestException ex) {
				// Assert
				StringAssert.Contains(ex.Message, "GrandParent error");
				StringAssert.Contains(ex.Message, "Parent error");
				StringAssert.Contains(ex.Message, "Child error");
						}
				}

		Test method FluentValidation.Tests.ValidationTestExtensionTests.Only_WithMultipleNestedParents_IncludesAllParentFailures threw exception: 
System.InvalidCastException: Unable to cast object of type 'TestValidationImplementation' to type 'FluentValidation.TestHelper.TestValidationContinuation'.
	}
}


Inital Task:
Here is the inital Task that was provided for generating the test:
Create a test class using the MSTest framework to test the Only method from the ValidationTestExtension class. The goal is to validate the method's functionality across different scenarios, including typical and edge cases, ensuring it handles both valid and invalid inputs appropriately.

The method to be tested is:
namespace FluentValidation.TestHelper;

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using Internal;
using Results;
using Validators;

public static class ValidationTestExtension {
	internal const string MatchAnyFailure = "__FV__ANY";

	public static ITestValidationWith Only(this ITestValidationWith failures) {
		var unmatchedFailures = failures.UnmatchedFailures;
		var continuation = (TestValidationContinuation) failures;

		// Also add in any unmatched failures from the parent (if there is one) recursively.
		do {
			if (continuation.Parent != null) {
				unmatchedFailures = unmatchedFailures.Union(continuation.Parent.UnmatchedFailures);
			}
			continuation = continuation.Parent as TestValidationContinuation;
		} while (continuation != null);

		var unmatchedFailuresList = unmatchedFailures.ToList();

		if (unmatchedFailuresList.Count > 0) {
			var errorMessageBanner = "Expected to have errors only matching specified conditions";
			string errorMessageDetails = "";
			for (int i = 0; i < unmatchedFailuresList.Count; i++) {
				errorMessageDetails += $"[{i}]: {unmatchedFailuresList[i].ErrorMessage}\n";
			}
			var errorMessage = $"{errorMessageBanner}\n----\nUnexpected Errors:\n{errorMessageDetails}";

			throw new ValidationTestException(errorMessage);
		}
		return failures;
	}
}

Here are additional project-specific details referenced in the method:
ITestValidationWith
- interface: public interface ITestValidationWith : ITestValidationContinuation {
}
- namespace: FluentValidation.TestHelper
- Inherits: ITestValidationContinuation

ITestValidationContinuation
- namespace: FluentValidation.TestHelper
- interface: public interface ITestValidationContinuation : IEnumerable<ValidationFailure> {
	IEnumerable<ValidationFailure> UnmatchedFailures { get; }
}
- Properties: IEnumerable<ValidationFailure> UnmatchedFailures
- methods: IEnumerator<ValidationFailure> GetEnumerator()
- dependencies: ValidationFailure (Namespace: FluentValidation.Results)
