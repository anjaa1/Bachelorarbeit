The generated MSTest test does not compile. Please correct the tests to fulfill the initial task.

Generated Test:
Below is the generated MSTest test class that does not compile:
using System;
using System.Linq.Expressions;
using FluentValidation.Internal;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace FluentValidation.Tests {
	[TestClass]
	public class PropertyChainTests {
		[TestMethod]
		public void FromExpression_ShouldHandleSimpleProperty() {
			// Arrange
			Expression<Func<TestClass, object>> expression = x => x.SimpleProperty;

			// Act
			var result = PropertyChain.FromExpression(expression);

			// Assert
			Assert.IsNotNull(result, "Result should not be null.");
			Assert.AreEqual("SimpleProperty", string.Join(".", result._memberNames), "Property name should match.");
		}

		[TestMethod]
		public void FromExpression_ShouldHandleNestedProperty() {
			// Arrange
			Expression<Func<TestClass, object>> expression = x => x.NestedProperty.SubProperty;

			// Act
			var result = PropertyChain.FromExpression(expression);

			// Assert
			Assert.IsNotNull(result, "Result should not be null.");
			Assert.AreEqual("NestedProperty.SubProperty", string.Join(".", result._memberNames), "Property chain should match nested structure.");
		}

		[TestMethod]
		public void FromExpression_ShouldThrowForNullExpression() {
			// Act & Assert
			Assert.ThrowsException<ArgumentNullException>(() => PropertyChain.FromExpression(null));
		}

		[TestMethod]
		public void FromExpression_ShouldHandleUnaryExpression() {
			// Arrange
			Expression<Func<TestClass, object>> expression = x => (object)x.SimpleProperty;

			// Act
			var result = PropertyChain.FromExpression(expression);

			// Assert
			Assert.IsNotNull(result, "Result should not be null.");
			Assert.AreEqual("SimpleProperty", string.Join(".", result._memberNames), "Property name should match even with a cast.");
		}

		[TestMethod]
		public void FromExpression_ShouldHandleEmptyChain() {
			// Arrange
			Expression<Func<TestClass, object>> expression = x => x;

			// Act
			var result = PropertyChain.FromExpression(expression);

			// Assert
			Assert.IsNotNull(result, "Result should not be null.");
			Assert.AreEqual(0, result._memberNames.Count, "Property chain should be empty for direct object reference.");
		}

		// Helper class for testing
		private class TestClass {
			public string SimpleProperty { get; set; }
			public NestedClass NestedProperty { get; set; }
		}

		private class NestedClass {
			public string SubProperty { get; set; }
		}
	}
}


Error Messages:
Here are the error messages reported by the IDE:
Severity	Code	Description	Line	Suppression State	Details
Error (active)	CS0122	'PropertyChain._memberNames' is inaccessible due to its protection level	51		
Error (active)	CS0122	'PropertyChain._memberNames' is inaccessible due to its protection level	19		
Error (active)	CS0122	'PropertyChain._memberNames' is inaccessible due to its protection level	32		
Error (active)	CS0122	'PropertyChain._memberNames' is inaccessible due to its protection level	64		


Inital Task:
Here is the inital Task that was provided for generating the test:
Create a test class using the MSTest framework to test the FromExpression method from the PropertyChain class. The goal is to validate the method's functionality across different scenarios, including typical and edge cases, ensuring it handles both valid and invalid inputs appropriately.

The method to be tested is:

namespace FluentValidation.Internal;

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Reflection;

/// <summary>
/// Represents a chain of properties
/// </summary>
public class PropertyChain {
	readonly List<string> _memberNames = new(2);

	/// <summary>
	/// Creates a new PropertyChain.
	/// </summary>
	public PropertyChain() {
	}
	
		/// <summary>
	/// Creates a new PropertyChain
	/// </summary>
	/// <param name="memberNames"></param>
	public PropertyChain(IEnumerable<string> memberNames) {
		this._memberNames.AddRange(memberNames);
	}

	/// <summary>
	/// Creates a PropertyChain from a lambda expression
	/// </summary>
	/// <param name="expression"></param>
	/// <returns></returns>
	public static PropertyChain FromExpression(LambdaExpression expression) {
		var memberNames = new Stack<string>();

		var getMemberExp = new Func<Expression, MemberExpression>(toUnwrap => {
			if (toUnwrap is UnaryExpression) {
				return ((UnaryExpression)toUnwrap).Operand as MemberExpression;
			}

			return toUnwrap as MemberExpression;
		});

		var memberExp = getMemberExp(expression.Body);

		while(memberExp != null) {
			memberNames.Push(memberExp.Member.Name);
			memberExp = getMemberExp(memberExp.Expression);
		}

		return new PropertyChain(memberNames);
	}
}

