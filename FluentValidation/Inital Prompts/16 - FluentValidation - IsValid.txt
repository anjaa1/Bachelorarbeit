Create a test class using the MSTest framework to test the IsValid method from the LengthValidator class. The goal is to validate the method's functionality across different scenarios, including typical and edge cases, ensuring it handles both valid and invalid inputs appropriately.

The method to be tested is:

namespace FluentValidation.Validators;

using System;

public class LengthValidator<T> : PropertyValidator<T,string>, ILengthValidator {
	public override string Name => "LengthValidator";

	public int Min { get; }
	public int Max { get; }

	public Func<T, int> MinFunc { get; set; }
	public Func<T, int> MaxFunc { get; set; }

	public LengthValidator(int min, int max) {
		Max = max;
		Min = min;

		if (max != -1 && max < min) {
			throw new ArgumentOutOfRangeException(nameof(max), "Max should be larger than min.");
		}
	}

	public LengthValidator(Func<T, int> min, Func<T, int> max) {
		MaxFunc = max;
		MinFunc = min;
	}

	public override bool IsValid(ValidationContext<T> context, string value) {
		if (value == null) return true;

		var min = Min;
		var max = Max;

		if (MaxFunc != null && MinFunc != null) {
			max = MaxFunc(context.InstanceToValidate);
			min = MinFunc(context.InstanceToValidate);
		}

		int length = value.Length;

		if (length < min || (length > max && max != -1)) {
			context.MessageFormatter
				.AppendArgument("MinLength", min)
				.AppendArgument("MaxLength", max)
				.AppendArgument("TotalLength", length);

			return false;
		}

		return true;
	}
}

Here are additional project-specific details referenced in the method:
ValidationContext<T>:
- namespace: FluentValidation
- Constructor: ValidationContext<T>(T instanceToValidate)
