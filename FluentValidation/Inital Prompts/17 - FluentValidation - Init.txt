Create a test class using the MSTest framework to test the Init method from the ScalePrecisionValidator class. The goal is to validate the method's functionality across different scenarios, including typical and edge cases, ensuring it handles both valid and invalid inputs appropriately.

The method to be tested is:

namespace FluentValidation.Validators;

using System;

/// <summary>
/// Allows a decimal to be validated for scale and precision.
/// Scale would be the number of digits to the right of the decimal point.
/// Precision would be the number of digits. This number includes both the left and the right sides of the decimal point.
///
/// It implies certain range of values that will be accepted by the validator.
/// It permits up to Precision - Scale digits to the left of the decimal point and up to Scale digits to the right.
///
/// It can be configured to use the effective scale and precision
/// (i.e. ignore trailing zeros) if required.
///
/// 123.4500 has an scale of 4 and a precision of 7, but an effective scale
/// and precision of 2 and 5 respectively.
/// </summary>
public class ScalePrecisionValidator<T> : PropertyValidator<T, decimal> {

	// TODO: For 12.0 swap the parameter order to match the PrecisionScale extension methods and add parameter for IgnoreTrailingZeros.
	public ScalePrecisionValidator(int scale, int precision) {
		Init(scale, precision);
	}

	public override string Name => "ScalePrecisionValidator";

	public int Scale { get; set; }

	public int Precision { get; set; }

	public bool IgnoreTrailingZeros { get; set; }

	private void Init(int scale, int precision) {
		Scale = scale;
		Precision = precision;

		if (Scale < 0)
			throw new ArgumentOutOfRangeException(
				nameof(scale), $"Scale must be a positive integer. [value:{Scale}].");
		if (Precision < 0)
			throw new ArgumentOutOfRangeException(
				nameof(precision), $"Precision must be a positive integer. [value:{Precision}].");
		if (Precision < Scale)
			throw new ArgumentOutOfRangeException(
				nameof(scale),
				$"Scale must be less than precision. [scale:{Scale}, precision:{Precision}].");
	}
}

Here are additional project-specific details referenced in the method:
The method to be tested is accessed through the public `ScalePrecisionValidator` constructor. While tests will invoke the public constructor, the focus is on validating the internal logic of the private `Init` method
