Create a test class using the MSTest framework to test the IsValid method from the EmptyValidator class. The goal is to validate the method's functionality across different scenarios, including typical and edge cases, ensuring it handles both valid and invalid inputs appropriately.

The method to be tested is:

namespace FluentValidation.Validators;

using System;
using System.Collections;
using System.Collections.Generic;

public class EmptyValidator<T,TProperty> : PropertyValidator<T,TProperty> {

	public override string Name => "EmptyValidator";

	public override bool IsValid(ValidationContext<T> context, TProperty value) {
		if (value == null) {
			return true;
		}

		if (value is string s && string.IsNullOrWhiteSpace(s)) {
			return true;
		}

		if (value is ICollection col && col.Count == 0) {
			return true;
		}

		if (value is IEnumerable e && IsEmpty(e)) {
			return true;
		}

		return EqualityComparer<TProperty>.Default.Equals(value, default);
	}
}

Here are additional project-specific details referenced in the method:
ValidationContext<T>:
- namespace: FluentValidation
- Constructor: ValidationContext<T>(T instanceToValidate)
