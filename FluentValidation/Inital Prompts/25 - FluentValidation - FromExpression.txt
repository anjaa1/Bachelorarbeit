Create a test class using the MSTest framework to test the FromExpression method from the PropertyChain class. The goal is to validate the method's functionality across different scenarios, including typical and edge cases, ensuring it handles both valid and invalid inputs appropriately.

The method to be tested is:

namespace FluentValidation.Internal;

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Reflection;

/// <summary>
/// Represents a chain of properties
/// </summary>
public class PropertyChain {
	readonly List<string> _memberNames = new(2);

	/// <summary>
	/// Creates a new PropertyChain.
	/// </summary>
	public PropertyChain() {
	}
	
		/// <summary>
	/// Creates a new PropertyChain
	/// </summary>
	/// <param name="memberNames"></param>
	public PropertyChain(IEnumerable<string> memberNames) {
		this._memberNames.AddRange(memberNames);
	}

	/// <summary>
	/// Creates a PropertyChain from a lambda expression
	/// </summary>
	/// <param name="expression"></param>
	/// <returns></returns>
	public static PropertyChain FromExpression(LambdaExpression expression) {
		var memberNames = new Stack<string>();

		var getMemberExp = new Func<Expression, MemberExpression>(toUnwrap => {
			if (toUnwrap is UnaryExpression) {
				return ((UnaryExpression)toUnwrap).Operand as MemberExpression;
			}

			return toUnwrap as MemberExpression;
		});

		var memberExp = getMemberExp(expression.Body);

		while(memberExp != null) {
			memberNames.Push(memberExp.Member.Name);
			memberExp = getMemberExp(memberExp.Expression);
		}

		return new PropertyChain(memberNames);
	}
}
