The generated MSTest test does not compile. Please correct the tests to fulfill the initial task.

Generated Test:
Below is the generated MSTest test class that does not compile:
using FluentValidation;
using FluentValidation.TestHelper;
using FluentValidation.Validators;
using FluentValidation.Results;
using FluentValidation.Internal;
using FluentValidation.TestHelper;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;

namespace FluentValidation.Testing {
	[TestClass]
	public class ValidationTestExtensionTests {
		[TestMethod]
		public void ShouldHaveChildValidator_TypicalScenario() {
			// Arrange
			var validator = new Validator();
			var expression = () => validator.Model.Property;
			var childValidatorType = typeof(ChildValidator);

			// Act and Assert
			validator.ShouldHaveChildValidator(expression, childValidatorType);
		}

		[TestMethod]
		public void ShouldHaveChildValidator_InvalidScenario() {
			// Arrange
			var validator = new Validator();
			var expression = () => validator.Model.Property;
			var childValidatorType = typeof(InvalidChildValidator);

			// Act and Assert
			Assert.ThrowsException<ValidationTestException>(() => validator.ShouldHaveChildValidator(expression, childValidatorType));
		}

		[TestMethod]
		public void ShouldHaveChildValidator_MultipleValidatorsScenario() {
			// Arrange
			var validator = new Validator();
			var expression = () => validator.Model.Property;
			var childValidatorTypes = new[] { typeof(ChildValidator1), typeof(ChildValidator2) };

			// Act and Assert
			validator.ShouldHaveChildValidator(expression, childValidatorTypes.First());
		}

		[TestMethod]
		public void ShouldHaveChildValidator_NullExpressionScenario() {
			// Arrange
			var validator = new Validator();
			var expression = null as Expression<Func<Validator, object>>;
			var childValidatorType = typeof(ChildValidator);

			// Act and Assert
			Assert.ThrowsException<ValidationTestException>(() => validator.ShouldHaveChildValidator(expression, childValidatorType));
		}

		[TestMethod]
		public void ShouldHaveChildValidator_ParameterExpressionScenario() {
			// Arrange
			var validator = new Validator();
			var expression = (Func<Validator, object>)(() => validator.Model.Property);
			var childValidatorType = typeof(ChildValidator);

			// Act and Assert
			validator.ShouldHaveChildValidator(expression, childValidatorType);
		}

		[TestMethod]
		public void ShouldHaveChildValidator_ParameterExpressionScenario_WithModelLevelValidator() {
			// Arrange
			var validator = new Validator();
			var expression = (Func<Validator, object>)(() => validator.Model.Property);
			var childValidatorType = typeof(ChildValidator);

			// Act and Assert
			validator.ShouldHaveChildValidator(expression, childValidatorType);
		}
	}

	public class Validator : IValidator<Validator> {
		public ValidatorModel Model { get; set; }

		public ValidationResult Validate(IValidationContext context) {
			return ValidationResult.Success;
		}

		public Task<ValidationResult> ValidateAsync(IValidationContext context, CancellationToken cancellation = default) {
			return Task.FromResult(ValidationResult.Success);
		}

		public IValidatorDescriptor CreateDescriptor() {
			return new ValidatorDescriptor();
		}

		public bool CanValidateInstancesOfType(Type type) {
			return true;
		}
	}

	public class ValidatorModel {
		public object Property { get; set; }
	}

	public class ChildValidator : IChildValidatorAdaptor {
		public Type ValidatorType => typeof(ChildValidator);
	}

	public class InvalidChildValidator : IChildValidatorAdaptor {
		public Type ValidatorType => typeof(InvalidChildValidator);
	}

	public class ChildValidator1 : IChildValidatorAdaptor {
		public Type ValidatorType => typeof(ChildValidator1);
	}

	public class ChildValidator2 : IChildValidatorAdaptor {
		public Type ValidatorType => typeof(ChildValidator2);
	}
}


Error Messages:
Here are the error messages reported by the IDE:
Severity	Code	Description	Line	Details
Error (active)	CS0535	'Validator' does not implement interface member 'IValidator<Validator>.Validate(Validator)'	87	
Error (active)	CS0535	'Validator' does not implement interface member 'IValidator<Validator>.ValidateAsync(Validator, CancellationToken)'	87	


Inital Task:
Here is the inital Task that was provided for generating the test:
Create a test class using the MSTest framework to test the ShouldHaveChildValidator method from the ValidationTestExtension class. The goal is to validate the method's functionality across different scenarios, including typical and edge cases, ensuring it handles both valid and invalid inputs appropriately.

The method to be tested is:

namespace FluentValidation.TestHelper;

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using Internal;
using Results;
using Validators;

public static class ValidationTestExtension {
	internal const string MatchAnyFailure = "__FV__ANY";

	//TODO: Should ShouldHaveChildValidator be deprecated? It isn't recommended and leads to brittle tests.
	public static void ShouldHaveChildValidator<T, TProperty>(this IValidator<T> validator, Expression<Func<T, TProperty>> expression, Type childValidatorType) {
		var descriptor = validator.CreateDescriptor();
		var expressionMemberName = expression.GetMember()?.Name;

		if (expressionMemberName == null && !expression.IsParameterExpression()) {
			throw new NotSupportedException("ShouldHaveChildValidator can only be used for simple property expressions. It cannot be used for model-level rules or rules that contain anything other than a property reference.");
		}

		var matchingValidators =
			expression.IsParameterExpression() ? GetModelLevelValidators<T>(descriptor) :
				descriptor.GetValidatorsForMember(expressionMemberName)
					.Select(x => x.Validator)
					.ToArray();


		matchingValidators = matchingValidators.Concat(GetDependentRules(expressionMemberName, expression, descriptor)).ToArray();

		var childValidatorTypes = matchingValidators.OfType<IChildValidatorAdaptor>().Select(x => x.ValidatorType);

		if (childValidatorTypes.All(x => !childValidatorType.IsAssignableFrom(x))) {
			var childValidatorNames = childValidatorTypes.Any() ? string.Join(", ", childValidatorTypes.Select(x => x.Name)) : "none";
			throw new ValidationTestException(string.Format("Expected property '{0}' to have a child validator of type '{1}.'. Instead found '{2}'", expressionMemberName, childValidatorType.Name, childValidatorNames));
		}
	}
}

Here are additional project-specific details referenced in the method:
IValidator<T>
- namespace: FluentValidation
- inherits: IValidator
- methods:
	- ValidationResult Validate(T instance)
	- Task<ValidationResult> ValidateAsync(T instance, CancellationToken cancellation = default)

IValidator:
- namespace: FluentValidation
- methods:
	- ValidationResult Validate(IValidationContext context)
	- Task<ValidationResult> ValidateAsync(IValidationContext context, CancellationToken cancellation = default)
	- IValidatorDescriptor CreateDescriptor()
	- bool CanValidateInstancesOfType(Type type)
- dependencies:
	- ValidationResult (NameSpace: FluentValidation.Results)
	- IValidationContext (NameSpace: FluentValidation)

IsParameterExpression: Checks if the expression is a parameter expression
- namespace: FluentValidation.Internal

GetModelLevelValidators:
- namespace: FluentValidation.TestHelper
- method signature: private static IPropertyValidator[] GetModelLevelValidators<T>(IValidatorDescriptor descriptor)

GetDependentRules
- namespace: FluentValidation.TestHelper
- mathod signature: private static IEnumerable<IPropertyValidator> GetDependentRules<T, TProperty>(string expressionMemberName, Expression<Func<T, TProperty>> expression, IValidatorDescriptor descriptor)

IChildValidatorAdaptor
- namespace: FluentValidation.Validators
- property: Type ValidatorType

