The generated MSTest test does not compile. Please correct the tests to fulfill the initial task.

Generated Test:
Below is the generated MSTest test class that does not compile:
using FluentValidation.Validators;
using FluentValidation.TestHelper;
using FluentAssertions;
using Xunit;

public class EmptyValidatorTests {
	[Fact]
	public void IsValid_returns_true_for_null_value() {
		// Arrange
		var validator = new EmptyValidator<string, string>();
		var context = new ValidationContext<string>("test");

		// Act
		var result = validator.IsValid(context, (string)null);

		// Assert
		result.Should().BeTrue();
	}

	[Fact]
	public void IsValid_returns_true_for_empty_string() {
		// Arrange
		var validator = new EmptyValidator<string, string>();
		var context = new ValidationContext<string>("test");

		// Act
		var result = validator.IsValid(context, string.Empty);

		// Assert
		result.Should().BeTrue();
	}

	[Fact]
	public void IsValid_returns_true_for_empty_collection() {
		// Arrange
		var validator = new EmptyValidator<string, string[]>();
		var context = new ValidationContext<string>("test");

		// Act
		var result = validator.IsValid(context, new string[0]);

		// Assert
		result.Should().BeTrue();
	}

	[Fact]
	public void IsValid_returns_true_for_empty_enumerable() {
		// Arrange
		var validator = new EmptyValidator<string, IEnumerable<string>>();
		var context = new ValidationContext<string>("test");

		// Act
		var result = validator.IsValid(context, new List<string>());

		// Assert
		result.Should().BeTrue();
	}

	[Fact]
	public void IsValid_returns_false_for_non_empty_string() {
		// Arrange
		var validator = new EmptyValidator<string, string>();
		var context = new ValidationContext<string>("test");

		// Act
		var result = validator.IsValid(context, "test");

		// Assert
		result.Should().BeFalse();
	}

	[Fact]
	public void IsValid_returns_false_for_non_empty_collection() {
		// Arrange
		var validator = new EmptyValidator<string, string[]>();
		var context = new ValidationContext<string>("test");

		// Act
		var result = validator.IsValid(context, new[] { "test" });

		// Assert
		result.Should().BeFalse();
	}

	[Fact]
	public void IsValid_returns_false_for_non_empty_enumerable() {
		// Arrange
		var validator = new EmptyValidator<string, IEnumerable<string>>();
		var context = new ValidationContext<string>("test");

		// Act
		var result = validator.IsValid(context, new[] { "test" });

		// Assert
		result.Should().BeFalse();
	}

	[Fact]
	public void IsValid_returns_false_for_default_value() {
		// Arrange
		var validator = new EmptyValidator<string, string>();
		var context = new ValidationContext<string>("test");

		// Act
		var result = validator.IsValid(context, default);

		// Assert
		result.Should().BeFalse();
	}
}

Error Messages:
Here are the error messages reported by the IDE:
Severity	Code	Description	Line	Details
Error (active)	CS0246	The type or namespace name 'FactAttribute' could not be found (are you missing a using directive or an assembly reference?)	7	
Error (active)	CS0246	The type or namespace name 'FluentAssertions' could not be found (are you missing a using directive or an assembly reference?)	3	
Error (active)	CS0246	The type or namespace name 'Xunit' could not be found (are you missing a using directive or an assembly reference?)	4	
Error (active)	CS0246	The type or namespace name 'Fact' could not be found (are you missing a using directive or an assembly reference?)	7	
Error (active)	CS0246	The type or namespace name 'FactAttribute' could not be found (are you missing a using directive or an assembly reference?)	20	
Error (active)	CS0246	The type or namespace name 'Fact' could not be found (are you missing a using directive or an assembly reference?)	20	
Error (active)	CS0246	The type or namespace name 'FactAttribute' could not be found (are you missing a using directive or an assembly reference?)	33	
Error (active)	CS0246	The type or namespace name 'Fact' could not be found (are you missing a using directive or an assembly reference?)	33	
Error (active)	CS0246	The type or namespace name 'FactAttribute' could not be found (are you missing a using directive or an assembly reference?)	46	
Error (active)	CS0246	The type or namespace name 'Fact' could not be found (are you missing a using directive or an assembly reference?)	46	
Error (active)	CS0246	The type or namespace name 'FactAttribute' could not be found (are you missing a using directive or an assembly reference?)	59	
Error (active)	CS0246	The type or namespace name 'Fact' could not be found (are you missing a using directive or an assembly reference?)	59	
Error (active)	CS0246	The type or namespace name 'FactAttribute' could not be found (are you missing a using directive or an assembly reference?)	72	
Error (active)	CS0246	The type or namespace name 'Fact' could not be found (are you missing a using directive or an assembly reference?)	72	
Error (active)	CS0246	The type or namespace name 'FactAttribute' could not be found (are you missing a using directive or an assembly reference?)	85	
Error (active)	CS0246	The type or namespace name 'Fact' could not be found (are you missing a using directive or an assembly reference?)	85	
Error (active)	CS0246	The type or namespace name 'FactAttribute' could not be found (are you missing a using directive or an assembly reference?)	98	
Error (active)	CS0246	The type or namespace name 'Fact' could not be found (are you missing a using directive or an assembly reference?)	98	


Inital Task:
Here is the inital Task that was provided for generating the test:
Create a test class using the MSTest framework to test the IsValid method from the EmptyValidator class. The goal is to validate the method's functionality across different scenarios, including typical and edge cases, ensuring it handles both valid and invalid inputs appropriately.

The method to be tested is:

namespace FluentValidation.Validators;

using System;
using System.Collections;
using System.Collections.Generic;

public class EmptyValidator<T,TProperty> : PropertyValidator<T,TProperty> {

	public override string Name => "EmptyValidator";

	public override bool IsValid(ValidationContext<T> context, TProperty value) {
		if (value == null) {
			return true;
		}

		if (value is string s && string.IsNullOrWhiteSpace(s)) {
			return true;
		}

		if (value is ICollection col && col.Count == 0) {
			return true;
		}

		if (value is IEnumerable e && IsEmpty(e)) {
			return true;
		}

		return EqualityComparer<TProperty>.Default.Equals(value, default);
	}
}

Here are additional project-specific details referenced in the method:
ValidationContext<T>:
- namespace: FluentValidation
- Constructor: ValidationContext<T>(T instanceToValidate)

