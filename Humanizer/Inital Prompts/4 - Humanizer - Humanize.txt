Create a test class using the MSTest framework to test the Humanize method from the EnumHumanizeExtensions class. The goal is to validate the method's functionality across different scenarios, including typical and edge cases, ensuring it handles both valid and invalid inputs appropriately.

The method to be tested is:

namespace Humanizer;

/// <summary>
/// Contains extension methods for humanizing Enums
/// </summary>
public static class EnumHumanizeExtensions
{
    /// <summary>
    /// Turns an enum member into a human readable string; e.g. AnonymousUser -> Anonymous user. It also honors DescriptionAttribute data annotation
    /// </summary>
    /// <param name="input">The enum member to be humanized</param>
    public static string Humanize<[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicFields)] T>(this T input)
        where T : struct, Enum
    {
        var (zero, humanized, values) = EnumCache<T>.GetInfo();
        if (EnumCache<T>.TreatAsFlags(input))
        {
            return values
                .Where(_ => _.CompareTo(zero) != 0 &&
                            input.HasFlag(_))
                .Select(_ => _.Humanize())
                .Humanize();
        }

        return humanized[input];
    }
}

Here are additional project-specific details referenced in the method:
EnumCache<T>: A static utility class for caching metadata and processing enums.
- Namespace: Humanizer
- Methods:
  - `static (T Zero, FrozenDictionary<T, string> Humanized, FrozenSet<T> Values) GetInfo()`
  - `static Dictionary<string, T> GetDehumanized()`
  - `static bool TreatAsFlags(T input)`
