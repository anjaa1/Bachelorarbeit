Create a test class using the MSTest framework to test the DehumanizeTo method from the EnumDehumanizeExtensions class. The goal is to validate the method's functionality across different scenarios, including typical and edge cases, ensuring it handles both valid and invalid inputs appropriately.

The method to be tested is:

namespace Humanizer;

/// <summary>
/// Contains extension methods for dehumanizing Enum string values.
/// </summary>
public static class EnumDehumanizeExtensions
{
    /// <summary>
    /// Dehumanizes a string into the Enum it was originally Humanized from!
    /// </summary>
    /// <param name="input">The string to be converted</param>
    /// <param name="targetEnum">The target enum</param>
    /// <param name="onNoMatch">What to do when input is not matched to the enum.</param>
    /// <exception cref="NoMatchFoundException">Couldn't find any enum member that matches the string</exception>
    /// <exception cref="ArgumentException">If targetEnum is not an enum</exception>
#if NET6_0_OR_GREATER
    [RequiresDynamicCode("The native code for the target enumeration might not be available at runtime.")]
    [RequiresUnreferencedCode("The native code for the target enumeration might not be available at runtime.")]
#endif
    public static Enum DehumanizeTo(this string input, Type targetEnum, OnNoMatch onNoMatch = OnNoMatch.ThrowsException)
    {
        var genericMethod = dehumanizeToMethod.MakeGenericMethod(targetEnum);
        try
        {
            return (Enum) genericMethod.Invoke(null, [input, onNoMatch])!;
        }
        catch (TargetInvocationException exception)
        {
            throw exception.InnerException!;
        }
    }
}

Here are additional project-specific details referenced in the method:
OnNoMatch: An enumeration defining behavior when no match is found.
- Namespace: Humanizer
- Values:
  - `ThrowsException`: Throws a `NoMatchFoundException`.
  - `ReturnsNull`: Returns `null` instead of throwing an exception.
dehumanizeToMethod: A static `MethodInfo` field in `EnumDehumanizeExtensions` used to create a generic method for invoking the target `DehumanizeTo` method dynamically.
- Declaration: static readonly MethodInfo dehumanizeToMethod = typeof(EnumDehumanizeExtensions)
      .GetMethod("DehumanizeTo", new[] { typeof(string), typeof(OnNoMatch) })!;
