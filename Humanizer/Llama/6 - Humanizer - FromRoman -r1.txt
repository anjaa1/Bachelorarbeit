The generated MSTest test does not compile. Please correct the tests to fulfill the initial task.

Generated Test:
Below is the generated MSTest test class that does not compile:
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Diagnostics;

namespace Humanizer.Test {
    [TestClass]
    public class RomanNumeralExtensionsTests {
        [TestMethod]
        public void FromRoman_ValidInput_ReturnsCorrectValue() {
            // Arrange
            var input = "XII";

            // Act
            var result = RomanNumeralExtensions.FromRoman(input);

            // Assert
            Assert.AreEqual(12, result);
        }

        [TestMethod]
        public void FromRoman_InvalidInput_ThrowsArgumentException() {
            // Arrange
            var input = "";

            // Act and Assert
            Assert.ThrowsException<ArgumentException>(() => RomanNumeralExtensions.FromRoman(input));
        }

        [TestMethod]
        public void FromRoman_EmptyInput_ThrowsArgumentException() {
            // Arrange
            var input = "   ";

            // Act and Assert
            Assert.ThrowsException<ArgumentException>(() => RomanNumeralExtensions.FromRoman(input));
        }

        [TestMethod]
        public void FromRoman_NullInput_ThrowsArgumentException() {
            // Arrange
            var input = (CharSpan)null;

            // Act and Assert
            Assert.ThrowsException<ArgumentException>(() => RomanNumeralExtensions.FromRoman(input));
        }

        [TestMethod]
        public void FromRoman_TypicalCase_ReturnsCorrectValue() {
            // Arrange
            var input = "MCMXCIX";

            // Act
            var result = RomanNumeralExtensions.FromRoman(input);

            // Assert
            Assert.AreEqual(1999, result);
        }

        [TestMethod]
        public void FromRoman_EdgeCase_ReturnsCorrectValue() {
            // Arrange
            var input = "I";

            // Act
            var result = RomanNumeralExtensions.FromRoman(input);

            // Assert
            Assert.AreEqual(1, result);
        }

        [TestMethod]
        public void FromRoman_InvalidRomanNumeral_ThrowsArgumentException() {
            // Arrange
            var input = "Invalid";

            // Act and Assert
            Assert.ThrowsException<ArgumentException>(() => RomanNumeralExtensions.FromRoman(input));
        }
    }
}

Error Messages:
Here are the error messages reported by the IDE:
Severity	Code	Description	Line	Details
Error (active)	CS8175	Cannot use ref local 'input' inside an anonymous method, lambda expression, or query expression	44	


Inital Task:
Here is the inital Task that was provided for generating the test:
Create a test class using the MSTest framework to test the FromRoman method from the RomanNumeralExtensions class. The goal is to validate the method's functionality across different scenarios, including typical and edge cases, ensuring it handles both valid and invalid inputs appropriately.

The method to be tested is:
using System.Diagnostics;

namespace Humanizer;

/// <summary>
/// Contains extension methods for changing a number to Roman representation (ToRoman) and from Roman representation back to the number (FromRoman)
/// </summary>
public static class RomanNumeralExtensions
{
    /// <summary>
    /// Converts Roman numbers into integer
    /// </summary>
    /// <param name="input">Roman number</param>
    /// <returns>Human-readable number</returns>
    public static int FromRoman(CharSpan input)
    {
        input = input.Trim();

        var length = input.Length;

        if (length == 0 || IsInvalidRomanNumeral(input))
        {
            throw new ArgumentException("Empty or invalid Roman numeral string.", nameof(input));
        }

        var total = 0;
        var i = length;

        while (i > 0)
        {
            var digit = GetRomanNumeralCharValue(input[--i]);
            if (i > 0)
            {
                var previousDigit = GetRomanNumeralCharValue(input[i - 1]);
                if (previousDigit < digit)
                {
                    digit -= previousDigit;
                    i--;
                }
            }

            total += digit;
        }

        return total;
    }
}

