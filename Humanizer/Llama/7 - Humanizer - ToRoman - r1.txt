The generated MSTest test does not compile. Please correct the tests to fulfill the initial task.

Generated Test:
Below is the generated MSTest test class that does not compile:
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;

namespace Humanizer.Tests {
    [TestClass]
    public class RomanNumeralExtensionsTests {
        [TestMethod]
        public void ToRoman_ValidInput_ReturnsCorrectRomanRepresentation() {
            // Arrange
            var input = 1234;

            // Act
            var result = input.ToRoman();

            // Assert
            Assert.AreEqual("MCCXXXIV", result);
        }

        [TestMethod]
        public void ToRoman_EdgeCaseInput_ReturnsCorrectRomanRepresentation() {
            // Arrange
            var input = 1;

            // Act
            var result = input.ToRoman();

            // Assert
            Assert.AreEqual("I", result);
        }

        [TestMethod]
        public void ToRoman_MaxValueInput_ReturnsCorrectRomanRepresentation() {
            // Arrange
            var input = 3999;

            // Act
            var result = input.ToRoman();

            // Assert
            Assert.AreEqual("MMMCMXCIX", result);
        }

        [TestMethod]
        public void ToRoman_MinValueInput_ReturnsCorrectRomanRepresentation() {
            // Arrange
            var input = 1;

            // Act
            var result = input.ToRoman();

            // Assert
            Assert.AreEqual("I", result);
        }

        [TestMethod]
        public void ToRoman_InvalidInput_ThrowsArgumentOutOfRangeException() {
            // Arrange
            var input = 0;

            // Act and Assert
            Assert.ThrowsException<ArgumentOutOfRangeException>(() => input.ToRoman());
        }

        [TestMethod]
        public void ToRoman_NegativeInput_ThrowsArgumentOutOfRangeException() {
            // Arrange
            var input = -1;

            // Act and Assert
            Assert.ThrowsException<ArgumentOutOfRangeException>(() => input.ToRoman());
        }

        [TestMethod]
        public void ToRoman_LargeInput_ThrowsArgumentOutOfRangeException() {
            // Arrange
            var input = 4000;

            // Act and Assert
            Assert.ThrowsException<ArgumentOutOfRangeException>(() => input.ToRoman());
        }

        [TestMethod]
        public void ToRoman_NullInput_ThrowsNullReferenceException() {
            // Arrange
            var input = null;

            // Act and Assert
            Assert.ThrowsException<NullReferenceException>(() => input.ToRoman());
        }
    }
}

Error Messages:
Here are the error messages reported by the IDE:
Severity	Code	Description	Line	Details
Error (active)	CS0815	Cannot assign <null> to an implicitly-typed variable	85	


Inital Task:
Here is the inital Task that was provided for generating the test:
Create a test class using the MSTest framework to test the ToRoman method from the RomanNumeralExtensions class. The goal is to validate the method's functionality across different scenarios, including typical and edge cases, ensuring it handles both valid and invalid inputs appropriately.

The method to be tested is:
using System.Diagnostics;

namespace Humanizer;

/// <summary>
/// Contains extension methods for changing a number to Roman representation (ToRoman) and from Roman representation back to the number (FromRoman)
/// </summary>
public static class RomanNumeralExtensions
{
    /// <summary>
    /// Converts the input to Roman number
    /// </summary>
    /// <param name="input">Integer input</param>
    /// <returns>Roman number</returns>
    /// <exception cref="ArgumentOutOfRangeException">Thrown when the input is smaller than 1 or larger than 3999</exception>
    public static string ToRoman(this int input)
    {
        const int minValue = 1;
        const int maxValue = 3999;
        const int maxRomanNumeralLength = 15;

        if (input is < minValue or > maxValue)
        {
            throw new ArgumentOutOfRangeException();
        }

        Span<char> builder = stackalloc char[maxRomanNumeralLength];
        var pos = 0;

        foreach (var pair in RomanNumeralsSequence)
        {
            while (input >= pair.Value)
            {
                pair.Key.AsSpan().CopyTo(builder.Slice(pos));
                pos += pair.Key.Length;
                input -= pair.Value;
            }
        }

        return builder.Slice(0, pos).ToString();
    }
}

