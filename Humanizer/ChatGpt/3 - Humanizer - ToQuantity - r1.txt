The generated MSTest test compiles but fails during execution. Please correct the tests to fulfill the initial task.

Generated Test:
Below is the generated MSTest test that does not compile:
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using Humanizer;

namespace Humanizer.Tests {
    [TestClass]
    public class ToQuantityExtensionsTests {
			        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void ToQuantity_ShouldThrowException_ForNullInput() {
            // Arrange
            string input = null;

            // Act
            input.ToQuantity(1);

            // Assert: Handled by ExpectedException attribute
        }
		Here are the error messages reported by the IDE:
		Test method did not throw expected exception System.ArgumentNullException. 

		        [TestMethod]
        public void ToQuantity_ShouldRespectCultureSpecificFormatting() {
            // Arrange
            string input = "request";
            long quantity = 1234;
            string format = "N";
            var culture = new System.Globalization.CultureInfo("de-DE");

            // Act
            string result = input.ToQuantity(quantity, format, culture);

            // Assert
            Assert.AreEqual("1.234 requests", result); // German culture uses '.' as a thousand separator
        }
		Here are the error messages reported by the IDE:
		Assert.AreEqual failed. Expected:<1.234 requests>. Actual:<1.234,00 requests>. 


		[TestMethod]
        public void ToQuantity_ShouldHandleNumericFormattingCorrectly() {
            // Arrange
            string input = "request";
            long quantity = 10000;
            string format = "N0";

            // Act
            string result = input.ToQuantity(quantity, format);

            // Assert
            Assert.AreEqual("10,000 requests", result);
        }
		Here are the error messages reported by the IDE:
		 Assert.AreEqual failed. Expected:<10,000 requests>. Actual:<10.000 requests>. 

        [TestMethod]
        public void ToQuantity_ShouldHandleEmptyStringInput() {
            // Arrange
            string input = string.Empty;

            // Act
            string result = input.ToQuantity(1);

            // Assert
            Assert.AreEqual("1", result); // No word to singularize/pluralize
        }
		Here are the error messages reported by the IDE:
		Assert.AreEqual failed. Expected:<1>. Actual:<1 >.
    }
}


Inital Task:
Here is the inital Task that was provided for generating the test:
Create a test class using the MSTest framework to test the ToQuantity method from the ToQuantityExtensions class. The goal is to validate the method's functionality across different scenarios, including typical and edge cases, ensuring it handles both valid and invalid inputs appropriately.

The method to be tested is:
namespace Humanizer;
/// <summary>
/// Provides extensions for formatting a <see cref="string"/> word as a quantity.
/// </summary>
public static class ToQuantityExtensions
{
   static string ToQuantity(this string input, long quantity, ShowQuantityAs showQuantityAs = ShowQuantityAs.Numeric, string? format = null, IFormatProvider? formatProvider = null)
   {
       var transformedInput = quantity == 1
           ? input.Singularize(inputIsKnownToBePlural: false)
           : input.Pluralize(inputIsKnownToBeSingular: false);

       if (showQuantityAs == ShowQuantityAs.None)
       {
           return transformedInput;
       }

       if (showQuantityAs == ShowQuantityAs.Numeric)
       {
           return string.Format(formatProvider, "{0} {1}", quantity.ToString(format, formatProvider), transformedInput);
       }

       return $"{quantity.ToWords()} {transformedInput}";
   }
}

Here are additional project-specific details referenced in the method:
The method to be tested is accessed through the public `ToQuantity` method. While tests will invoke the public method, the focus is on validating the internal logic of the private `ToQuantity` method, which handles pluralization, singularization, and quantity formatting based on `ShowQuantityAs`:
    /// <summary>
    /// Prefixes the provided word with the number and accordingly pluralizes or singularizes the word
    /// </summary>
    /// <param name="input">The word to be prefixed</param>
    /// <param name="quantity">The quantity of the word</param>
    /// <param name="format">A standard or custom numeric format string.</param>
    /// <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
    /// <example>
    /// "request".ToQuantity(0) => "0 requests"
    /// "request".ToQuantity(10000, format: "N0") => "10,000 requests"
    /// "request".ToQuantity(1, format: "N0") => "1 request"
    /// </example>
    public static string ToQuantity(this string input, long quantity, string? format, IFormatProvider? formatProvider = null) =>
        input.ToQuantity(quantity, showQuantityAs: ShowQuantityAs.Numeric, format: format, formatProvider: formatProvider);
		
		
ShowQuantityAs: Enumerates the ways of displaying a quantity value when converting.
- Namespace: Humanizer
- Values:
  - `None = 0`: No quantity will be included in the formatted string.
  - `Numeric`: The quantity is included as its numeric value (e.g., "1").
  - `Words`: The quantity is included as words (e.g., "123" â†’ "one hundred and twenty-three").
