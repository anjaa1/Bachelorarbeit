The generated MSTest test does not compile. Please correct the tests to fulfill the initial task.

Generated Test:
Below is the generated MSTest test class that does not compile:
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using Humanizer;

namespace HumanizerTests {
    [TestClass]
    public class EnumHumanizeExtensionsTests {
        private enum TestEnum {
            [System.ComponentModel.Description("Value One")]
            ValueOne,

            [System.ComponentModel.Description("Value Two")]
            ValueTwo,

            ValueThree,
        }

        [Flags]
        private enum FlagsEnum {
            None = 0,
            First = 1,
            Second = 2,
            Third = 4,
        }

        [TestMethod]
        public void Humanize_ValidEnumValue_ReturnsHumanizedString() {
            // Arrange
            var input = TestEnum.ValueOne;

            // Act
            var result = input.Humanize();

            // Assert
            Assert.AreEqual("Value One", result);
        }

        [TestMethod]
        public void Humanize_EnumValueWithoutDescription_ReturnsHumanizedName() {
            // Arrange
            var input = TestEnum.ValueThree;

            // Act
            var result = input.Humanize();

            // Assert
            Assert.AreEqual("Value three", result);
        }

        [TestMethod]
        public void Humanize_FlagEnumValue_ReturnsHumanizedFlags() {
            // Arrange
            var input = FlagsEnum.First | FlagsEnum.Second;

            // Act
            var result = input.Humanize();

            // Assert
            Assert.AreEqual("First, Second", result);
        }

        [TestMethod]
        public void Humanize_FlagEnumNone_ReturnsEmptyString() {
            // Arrange
            var input = FlagsEnum.None;

            // Act
            var result = input.Humanize();

            // Assert
            Assert.AreEqual(string.Empty, result);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void Humanize_NullInput_ThrowsArgumentNullException() {
            // Arrange
            TestEnum? input = null;

            // Act
            _ = input.Humanize();

            // Assert handled by ExpectedException
        }

        [TestMethod]
        public void Humanize_InvalidEnumType_ThrowsArgumentException() {
            // Arrange
            var input = (TestEnum)999;

            // Act & Assert
            Assert.ThrowsException<KeyNotFoundException>(() => input.Humanize());
        }
    }
}

Error Messages:
Here are the error messages reported by the IDE:
Severity	Code	Description	Line	Details
Error (active)	CS0453	The type 'EnumHumanizeExtensionsTests.TestEnum?' must be a non-nullable value type in order to use it as parameter 'T' in the generic type or method 'EnumHumanizeExtensions.Humanize<T>(T)'	82	


Inital Task:
Here is the inital Task that was provided for generating the test:
Create a test class using the MSTest framework to test the Humanize method from the EnumHumanizeExtensions class. The goal is to validate the method's functionality across different scenarios, including typical and edge cases, ensuring it handles both valid and invalid inputs appropriately.

The method to be tested is:

namespace Humanizer;

/// <summary>
/// Contains extension methods for humanizing Enums
/// </summary>
public static class EnumHumanizeExtensions
{
    /// <summary>
    /// Turns an enum member into a human readable string; e.g. AnonymousUser -> Anonymous user. It also honors DescriptionAttribute data annotation
    /// </summary>
    /// <param name="input">The enum member to be humanized</param>
    public static string Humanize<[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicFields)] T>(this T input)
        where T : struct, Enum
    {
        var (zero, humanized, values) = EnumCache<T>.GetInfo();
        if (EnumCache<T>.TreatAsFlags(input))
        {
            return values
                .Where(_ => _.CompareTo(zero) != 0 &&
                            input.HasFlag(_))
                .Select(_ => _.Humanize())
                .Humanize();
        }

        return humanized[input];
    }
}

Here are additional project-specific details referenced in the method:
EnumCache<T>: A static utility class for caching metadata and processing enums.
- Namespace: Humanizer
- Methods:
  - `static (T Zero, FrozenDictionary<T, string> Humanized, FrozenSet<T> Values) GetInfo()`
  - `static Dictionary<string, T> GetDehumanized()`
  - `static bool TreatAsFlags(T input)`

