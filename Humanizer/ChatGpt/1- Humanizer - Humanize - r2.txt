The generated MSTest test compiles but fails during execution. Please correct the tests to fulfill the initial task.

Generated Test:
Below is the generated MSTest test that does not compile:
using System;
using System.Globalization;
using Humanizer;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Humanizer.Tests {
    [TestClass]
    public class DateHumanizeExtensionsTests {
        [TestMethod]
        public void Humanize_WithFutureDate_HandlesCorrectly() {
            // Arrange
            DateTime input = DateTime.UtcNow.AddDays(3);

            // Act
            var result = input.Humanize();

            // Assert
            Assert.IsNotNull(result);
            Assert.IsTrue(result.Contains("in 3 days"));
        }
		Here are the error messages reported by the IDE:
		 Assert.IsTrue failed.
		 
		         [TestMethod]
        public void Humanize_WithSpecificCulture_ReturnsLocalizedResult() {
            // Arrange
            DateTime input = DateTime.UtcNow.AddHours(-1);
            CultureInfo culture = new CultureInfo("fr-FR");

            // Act
            var result = input.Humanize(culture: culture);

            // Assert
            Assert.IsNotNull(result);
            Assert.IsTrue(result.Contains("il y a 1 heure"));
        }
		Here are the error messages reported by the IDE:
		 Assert.IsTrue failed.
		 
		         [TestMethod]
        public void Humanize_WithSpecifiedComparisonDate_UsesComparisonDate() {
            // Arrange
            DateTime input = new DateTime(2023, 1, 1);
            DateTime comparisonDate = new DateTime(2023, 1, 5);

            // Act
            var result = input.Humanize(dateToCompareAgainst: comparisonDate);

            // Assert
            Assert.IsNotNull(result);
            Assert.IsTrue(result.Contains("4 days ago"));
        }
		Here are the error messages reported by the IDE:
		 Assert.IsTrue failed.
}}


Inital Task:
Here is the inital Task that was provided for generating the test:
Create a test class using the MSTest framework to test the Humanize method from the DateHumanizeExtensions class. The goal is to validate the method's functionality across different scenarios, including typical and edge cases, ensuring it handles both valid and invalid inputs appropriately.

The method to be tested is:

namespace Humanizer;

/// <summary>
/// Humanizes DateTime into human readable sentence
/// </summary>
public static class DateHumanizeExtensions
{
    public static string Humanize(this DateTime? input, bool? utcDate = null, DateTime? dateToCompareAgainst = null, CultureInfo? culture = null)
    {
        if (input.HasValue)
        {
            return Humanize(input.Value, utcDate, dateToCompareAgainst, culture);
        }

        return Configurator
            .GetFormatter(culture)
            .DateHumanize_Never();
    }
}

Here are additional project-specific details referenced in the method:

Configurator: Provides a configuration point for Humanizer
- Namespace: Humanizer
- Details:
	- Regristries:
		- CollectionFormatters: A registry of formatters used to format collections based on the current locale
		- Formatters: Registry for string formatters based on the current locale.
		- NumberToWordsConverters: Registry for number-to-words converters for localization.
		- Ordinalizers: Registry for ordinalizers used in localization.
		- DateToOrdinalWordsConverters: Registry for date-to-ordinal-word converters.
		- DateOnlyToOrdinalWordsConverters (NET6.0+): Registry for date-only ordinal converters.
		- TimeOnlyToClockNotationConverters (NET6.0+): Registry for time-only to clock notation converters.
- Strategies:
	- DateTimeHumanizeStrategy: Defines the strategy for humanizing DateTime.
	- DateTimeOffsetHumanizeStrategy: Defines the strategy for humanizing DateTimeOffset.
	- DateOnlyHumanizeStrategy (NET6.0+): Defines the strategy for humanizing DateOnly.
	- TimeOnlyHumanizeStrategy (NET6.0+): Defines the strategy for humanizing TimeOnly
- Methods:
	- public static void UseEnumDescriptionPropertyLocator(Func<PropertyInfo, bool> func): Sets a predicate for locating description properties for enums.

Humanize: Turns the current or provided date into human readable sentence
- returns: distance of time in words
- method signature: public static string Humanize(this DateTime input, bool? utcDate = null, DateTime? dateToCompareAgainst = null, CultureInfo? culture = null)

