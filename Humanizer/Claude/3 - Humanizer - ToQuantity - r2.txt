The generated MSTest test does not compile. Please correct the tests to fulfill the initial task.

Generated Test:
Below is the generated MSTest test class that does not compile:
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Globalization;
using Humanizer;

namespace Humanizer.Tests {
    [TestClass]
    public class ToQuantityExtensionsTests {
        private static readonly CultureInfo DefaultCulture = CultureInfo.InvariantCulture;

        [TestMethod]
        public void ToQuantity_WithSingularInput_ReturnsSingularForQuantityOne() {
            // Arrange
            const string input = "request";
            const long quantity = 1;

            // Act
            string result = input.ToQuantity(quantity, "N0", DefaultCulture);

            // Assert
            Assert.AreEqual("1 request", result);
        }

        [TestMethod]
        public void ToQuantity_WithSingularInput_ReturnsPluralForQuantityZero() {
            // Arrange
            const string input = "request";
            const long quantity = 0;

            // Act
            string result = input.ToQuantity(quantity, "N0", DefaultCulture);

            // Assert
            Assert.AreEqual("0 requests", result);
        }

        [TestMethod]
        public void ToQuantity_WithCustomFormat_AppliesFormatting() {
            // Arrange
            const string input = "request";
            const long quantity = 10000;

            // Act
            // Using InvariantCulture to ensure consistent formatting across different systems
            string result = input.ToQuantity(quantity, "N0", CultureInfo.InvariantCulture);

            // Assert
            Assert.AreEqual("10,000 requests", result);
        }

        [TestMethod]
        public void ToQuantity_WithFrenchFormatProvider_AppliesFormatting() {
            // Arrange
            const string input = "request";
            const long quantity = 1000;
            var formatProvider = new CultureInfo("fr-FR");

            // Act
            string result = input.ToQuantity(quantity, ShowQuantityAs.Numeric, "N0", formatProvider);

            // Assert
            Assert.AreEqual("1 000 requests", result);
        }

        [TestMethod]
        public void ToQuantity_WithShowQuantityAsNone_ReturnsOnlyWord() {
            // Arrange
            const string input = "request";
            const long quantity = 5;

            // Act
            string result = input.ToQuantity(quantity, ShowQuantityAs.None, null, DefaultCulture);

            // Assert
            Assert.AreEqual("requests", result);
        }

        [TestMethod]
        public void ToQuantity_WithNullFormatProvider_UsesCurrentCulture() {
            // Arrange
            const string input = "request";
            const long quantity = 1000;

            // Act
            string result = input.ToQuantity(quantity, ShowQuantityAs.Numeric, "N0", null);

            // Assert
            // The exact expected string will depend on the current culture
            Assert.IsTrue(result.EndsWith("requests"));
            Assert.IsTrue(result.StartsWith("1"));
        }

        [TestMethod]
        public void ToQuantity_WithNegativeQuantity_HandlesNegativeNumbers() {
            // Arrange
            const string input = "request";
            const long quantity = -5;

            // Act
            string result = input.ToQuantity(quantity, "N0", DefaultCulture);

            // Assert
            Assert.AreEqual("-5 requests", result);
        }

        [TestMethod]
        public void ToQuantity_WithEmptyInput_ReturnsFormattedQuantityWithSpace() {
            // Arrange
            const string input = "";
            const long quantity = 5;

            // Act
            string result = input.ToQuantity(quantity, "N0", DefaultCulture);

            // Assert
            Assert.AreEqual("5 ", result);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void ToQuantity_WithNullInput_ThrowsArgumentNullException() {
            // Arrange
            string? input = null;
            const long quantity = 5;

            // Act & Assert
            // The extension method should throw ArgumentNullException when input is null
            _ = ToQuantityExtensions.ToQuantity(input!, quantity, ShowQuantityAs.Numeric, null, null);
        }

        [TestMethod]
        public void ToQuantity_WithShowQuantityAsWords_ReturnsQuantityInWords() {
            // Arrange
            const string input = "request";
            const long quantity = 123;

            // Act
            string result = input.ToQuantity(quantity, ShowQuantityAs.Words, null, DefaultCulture);

            // Assert
            Assert.AreEqual("one hundred and twenty-three requests", result);
        }
    }
}

Error Messages:
Here are the error messages reported by the IDE:
Severity	Code	Description	Line	Details
Error (active)	CS1501	No overload for method 'ToQuantity' takes 4 arguments	58	
Error (active)	CS1501	No overload for method 'ToQuantity' takes 4 arguments	71	
Error (active)	CS1501	No overload for method 'ToQuantity' takes 4 arguments	84	
Error (active)	CS1501	No overload for method 'ToQuantity' takes 4 arguments	137	


Inital Task:
Here is the inital Task that was provided for generating the test:
Create a test class using the MSTest framework to test the ToQuantity method from the ToQuantityExtensions class. The goal is to validate the method's functionality across different scenarios, including typical and edge cases, ensuring it handles both valid and invalid inputs appropriately.

The method to be tested is:
namespace Humanizer;
/// <summary>
/// Provides extensions for formatting a <see cref="string"/> word as a quantity.
/// </summary>
public static class ToQuantityExtensions
{
   static string ToQuantity(this string input, long quantity, ShowQuantityAs showQuantityAs = ShowQuantityAs.Numeric, string? format = null, IFormatProvider? formatProvider = null)
   {
       var transformedInput = quantity == 1
           ? input.Singularize(inputIsKnownToBePlural: false)
           : input.Pluralize(inputIsKnownToBeSingular: false);

       if (showQuantityAs == ShowQuantityAs.None)
       {
           return transformedInput;
       }

       if (showQuantityAs == ShowQuantityAs.Numeric)
       {
           return string.Format(formatProvider, "{0} {1}", quantity.ToString(format, formatProvider), transformedInput);
       }

       return $"{quantity.ToWords()} {transformedInput}";
   }
}

Here are additional project-specific details referenced in the method:
The method to be tested is accessed through the public `ToQuantity` method. While tests will invoke the public method, the focus is on validating the internal logic of the private `ToQuantity` method, which handles pluralization, singularization, and quantity formatting based on `ShowQuantityAs`:
    /// <summary>
    /// Prefixes the provided word with the number and accordingly pluralizes or singularizes the word
    /// </summary>
    /// <param name="input">The word to be prefixed</param>
    /// <param name="quantity">The quantity of the word</param>
    /// <param name="format">A standard or custom numeric format string.</param>
    /// <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
    /// <example>
    /// "request".ToQuantity(0) => "0 requests"
    /// "request".ToQuantity(10000, format: "N0") => "10,000 requests"
    /// "request".ToQuantity(1, format: "N0") => "1 request"
    /// </example>
    public static string ToQuantity(this string input, long quantity, string? format, IFormatProvider? formatProvider = null) =>
        input.ToQuantity(quantity, showQuantityAs: ShowQuantityAs.Numeric, format: format, formatProvider: formatProvider);
		
		
ShowQuantityAs: Enumerates the ways of displaying a quantity value when converting.
- Namespace: Humanizer
- Values:
  - `None = 0`: No quantity will be included in the formatted string.
  - `Numeric`: The quantity is included as its numeric value (e.g., "1").
  - `Words`: The quantity is included as words (e.g., "123" â†’ "one hundred and twenty-three").

